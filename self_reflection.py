import os
import json
import asyncio
import subprocess
import logging
import datetime
import py_compile
from cloud_memory import upload_memory_to_mega
from memory_sync import sync_memory
from gpt_module import ask_openrouter
from self_update import update_file, git_commit_and_push

CODE_PATH = "ra_bot_gpt.py"
LOG_FILE = "logs/self_reflection_log.json"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    encoding="utf-8"
)

def load_code(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def log_action(entry):
    log = []
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                log = json.load(f)
        except Exception:
            pass
    log.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(log, f, ensure_ascii=False, indent=2)

# --- –ê–≤—Ç–æ—Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ ---
def run_bot_tests():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ"""
    success = True
    errors = []

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    try:
        from ra_bot_gpt import load_memory, save_memory
        test_user_id = 99999
        test_data = {"user_id": test_user_id, "name": "–¢–µ—Å—Ç", "messages": []}
        save_memory(test_user_id, test_data)
        loaded = load_memory(test_user_id)
        assert loaded["name"] == "–¢–µ—Å—Ç"
    except Exception as e:
        success = False
        errors.append(f"–û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏: {e}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ /whoami
    try:
        from ra_bot_gpt import get_memory_path
        path = get_memory_path(test_user_id)
        assert os.path.exists(path)
    except Exception as e:
        success = False
        errors.append(f"–û—à–∏–±–∫–∞ /whoami: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        from ra_bot_gpt import get_user_folder
        folder = get_user_folder(test_user_id)
        assert os.path.exists(folder)
    except Exception as e:
        success = False
        errors.append(f"–û—à–∏–±–∫–∞ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    return success, errors

async def self_reflect_and_update():
    logging.info("üß† –†–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")

    try:
        code = load_code(CODE_PATH)
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∫–æ–¥, "
                    "—Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É—Å—Ç–æ–π—á–∏–≤–µ–µ, —É–º–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ. "
                    "–ù–µ –º–µ–Ω—è–π API-–∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã."
                )
            },
            {
                "role": "user",
                "content": f"–í–æ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥:\n\n{code}\n\n–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."
            }
        ]

        response = await ask_openrouter(messages)
        improved_code = response.strip()

        if len(improved_code) > 100 and "import" in improved_code:
            temp_path = CODE_PATH + ".tmp"
            update_file(temp_path, improved_code)

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–µ—Ä–µ–¥ –∑–∞–º–µ–Ω–æ–π ---
            try:
                py_compile.compile(temp_path, doraise=True)

                # --- –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ ---
                run_tests, test_errors = run_bot_tests()
                if run_tests:
                    os.replace(temp_path, CODE_PATH)
                    git_commit_and_push("ü§ñ –†–∞ —É–ª—É—á—à–∏–ª —Å–µ–±—è (self_reflection + –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã)")
                    log_action({
                        "time": datetime.datetime.now().isoformat(),
                        "status": "success",
                        "summary": "–ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –†–∞ —á–µ—Ä–µ–∑ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑ –∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã"
                    })
                    logging.info("‚úÖ –†–∞ —É–ª—É—á—à–∏–ª —Å–µ–±—è, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω, –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—É—à –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                else:
                    logging.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {test_errors}")
                    log_action({
                        "time": datetime.datetime.now().isoformat(),
                        "status": "skipped",
                        "summary": f"–ö–æ–¥ –Ω–µ –ø—É—à–∏—Ç—Å—è, –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {test_errors}"
                    })

            except py_compile.PyCompileError as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –∫–æ–¥–µ: {e}")
                log_action({
                    "time": datetime.datetime.now().isoformat(),
                    "status": "skipped",
                    "summary": f"GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–¥ —Å –æ—à–∏–±–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}"
                })

        else:
            log_action({
                "time": datetime.datetime.now().isoformat(),
                "status": "skipped",
                "summary": "–û—Ç–≤–µ—Ç GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            })
            logging.info("‚ö†Ô∏è –û—Ç–≤–µ—Ç GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–æ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π.")

    except Exception as e:
        log_action({
            "time": datetime.datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        })
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")

    # --- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
    try:
        upload_memory_to_mega()
        logging.info("üì§ –ü–∞–º—è—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–∞ –≤ Mega")

        sync_memory()
        logging.info("üîÑ –ü–∞–º—è—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å GitHub")

        logging.info("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ GitHub...")
        subprocess.run(["git", "pull", "origin", "main"], check=False)

        if os.getenv("FLY_APP_NAME") is None:
            logging.info("üöÄ –ê–≤—Ç–æ–¥–µ–ø–ª–æ–π –†–∞ –Ω–∞ Fly.io...")
            subprocess.run(["flyctl", "deploy", "--remote-only"], check=False)
        else:
            logging.info("üåç –î–µ–ø–ª–æ–π –ø—Ä–æ–ø—É—â–µ–Ω: —Ä–∞–±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ Fly.io —Å—Ä–µ–¥—ã.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ post-reflection –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")

    finally:
        logging.info(f"‚ú® –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.datetime.now().isoformat()}")
        logging.info("üïäÔ∏è –°–∏—Å—Ç–µ–º–∞ –†–∞ –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

if __name__ == "__main__":
    asyncio.run(self_reflect_and_update())
