import os
import json
import datetime
from gpt_module import ask_openrouter
from self_update import update_file, git_commit_and_push

CODE_PATH = "ra_bot_gpt.py"
LOG_FILE = "logs/self_reflection_log.json"

def load_code(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def log_action(entry):
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    log = []
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            log = json.load(f)
    log.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(log, f, ensure_ascii=False, indent=2)

async def self_reflect_and_update():
    """–†–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–π –∫–æ–¥ –∏ —É–ª—É—á—à–∞–µ—Ç –µ–≥–æ"""
    code = load_code(CODE_PATH)
    messages = [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –∫–æ–¥, —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É—Å—Ç–æ–π—á–∏–≤–µ–µ, —É–º–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ. –ù–µ –º–µ–Ω—è–π API-–∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã."
        },
        {
            "role": "user",
            "content": f"–í–æ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥:\n\n{code}\n\n–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."
        }
    ]

    try:
        response = await ask_openrouter(messages)
        improved_code = response.strip()

        if len(improved_code) > 100 and "import" in improved_code:
            update_file(CODE_PATH, improved_code)
            git_commit_and_push("ü§ñ –†–∞ —É–ª—É—á—à–∏–ª —Å–µ–±—è (self_reflection)")
            log_action({
                "time": datetime.datetime.now().isoformat(),
                "status": "success",
                "summary": "–ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –†–∞ —á–µ—Ä–µ–∑ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑"
            })
            print("‚úÖ –†–∞ —É–ª—É—á—à–∏–ª —Å–µ–±—è –∏ –∑–∞–ø—É—à–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")
        else:
            log_action({
                "time": datetime.datetime.now().isoformat(),
                "status": "skipped",
                "summary": "–û—Ç–≤–µ—Ç GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            })
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç GPT –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–æ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π.")
    except Exception as e:
        log_action({
            "time": datetime.datetime.now().isoformat(),
            "status": "error",
            "error": str(e)
        })
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(self_reflect_and_update())
