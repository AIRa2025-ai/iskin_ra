# ra_repo_manager.py ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –†–∞ üåû
import os
import json
import logging
import asyncio
from datetime import datetime
from gpt_module import ask_openrouter_with_fallback as safe_ask_openrouter
from github_commit import create_commit_push

BASE_DIR = os.path.abspath(".")  # –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
NEW_MODULE_TEMPLATE = """\
# {module_name}.py ‚Äî –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –†–∞
\"\"\"–°–æ–∑–¥–∞–Ω–æ –ò—Å–∫–ò–Ω–æ–º –†–∞, {timestamp}\"\"\"

def main():
    # TODO: –¥–æ–ø–∏—à–∏ –ª–æ–≥–∏–∫—É –º–æ–¥—É–ª—è
    pass
"""

async def list_repo_files(base_dir=BASE_DIR, exts=None):
    """–°–∫–∞–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–µ–≤—å—é"""
    exts = exts or [".py", ".json", ".md", ".txt"]
    files_summary = {}
    for root, _, files in os.walk(base_dir):
        for file in files:
            if any(file.endswith(e) for e in exts):
                path = os.path.join(root, file)
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        content = f.read(500)  # –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                    files_summary[path] = content
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {path}: {e}")
    return files_summary

async def create_new_module(module_name: str, description: str, user_id: int):
    """–ì–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ GPT –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ"""
    file_path = os.path.join(BASE_DIR, f"{module_name}.py")
    timestamp = datetime.now().isoformat()
    system_msg = f"–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π Python –º–æ–¥—É–ª—å '{module_name}' –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. {description}"
    messages = [
        {"role": "system", "content": system_msg},
        {"role": "user", "content": "–°–æ–∑–¥–∞–π –∫–æ–¥ –º–æ–¥—É–ª—è."}
    ]

    raw = await safe_ask_openrouter(user_id, messages)
    code = raw if isinstance(raw, str) else str(raw)

    # –µ—Å–ª–∏ GPT –Ω–µ –≤—ã–¥–∞–ª –∫–æ–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω
    if not code.strip():
        code = NEW_MODULE_TEMPLATE.format(module_name=module_name, timestamp=timestamp)

    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(code)
        logging.info(f"‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω: {file_path}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
        return None
    return file_path

async def auto_register_module(module_name: str):
    """–î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª ra_bot_gpt.py"""
    main_file = os.path.join(BASE_DIR, "ra_bot_gpt.py")
    try:
        with open(main_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
        import_line = f"import {module_name}\n"
        if import_line not in lines:
            lines.insert(0, import_line)
            with open(main_file, "w", encoding="utf-8") as f:
                f.writelines(lines)
            logging.info(f"üå± –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è '{module_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ ra_bot_gpt.py")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {e}")

async def commit_and_push_changes(branch_name=None, commit_msg=None):
    """–°–æ–∑–¥–∞—ë–º –∫–æ–º–º–∏—Ç –∏ PR —á–µ—Ä–µ–∑ helper"""
    branch_name = branch_name or f"ra-update-{int(datetime.now().timestamp())}"
    commit_msg = commit_msg or "üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –†–∞"
    files_dict = {}  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        pr = await asyncio.to_thread(create_commit_push, branch_name, files_dict, commit_msg)
        logging.info(f"‚úÖ PR —Å–æ–∑–¥–∞–Ω: {pr.get('html_url','?')}")
        return pr
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PR: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –†–∞ —Å–∞–º –¥–µ–ª–∞–ª —Ä–µ–≤–∏–∑–∏—é –∏ —Å–æ–∑–¥–∞–≤–∞–ª –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
async def ra_repo_autoupdate(user_id: int):
    files = await list_repo_files()
    logging.info(f"üîç –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ: {len(files)}")
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤
    new_module_path = await create_new_module("ra_logger", "–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏", user_id)
    if new_module_path:
        await auto_register_module("ra_logger")
        await commit_and_push_changes()
