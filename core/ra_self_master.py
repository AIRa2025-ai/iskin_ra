# core/ra_self_master.py
import os
import json
import logging
from datetime import datetime, timezone
import asyncio

# –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–ª–æ–∞–¥–µ—Ä ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ
try:
    from ra_autoloader import RaAutoloader
except Exception:
    RaAutoloader = None

# –º–æ–¥—É–ª—å "–ø–æ–ª–∏—Ü–∏—è" –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑ modules
_police = None
try:
    from modules import ra_police as police_module
    _police = police_module
except Exception:
    try:
        from modules.ra_police import RaPolice  # type: ignore
        _police = True
    except Exception:
        _police = None

# –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º—ã—à–ª–µ–Ω–∏—è/—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
from modules.ra_thinker import RaThinker
from modules.ra_creator import RaCreator
from modules.ra_synthesizer import RaSynthesizer


class RaSelfMaster:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª—ë—Ä –°–æ–∑–Ω–∞–Ω–∏—è ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –†–∞,
    —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç, –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª–∏ –∏ –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª—å "–ø–æ–ª–∏—Ü–∏—è".
    """

    def __init__(self, manifest_path="data/ra_manifest.json"):
        self.thinker = RaThinker()
        self.creator = RaCreator()
        self.synth = RaSynthesizer()
        self.mood = "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
        self.manifest_path = manifest_path
        self.manifest = self.load_manifest()
        self.active_modules = self.manifest.get("active_modules", [])
        # –∞–≤—Ç–æ–ª–æ–∞–¥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.autoloader = RaAutoloader() if RaAutoloader else None
        self.police = None
        self._tasks = []

    async def awaken(self):
        logging.info("üåû –†–∞ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.")
        # 1) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–ª–æ–∞–¥–µ—Ä –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        if self.autoloader:
            try:
                modules = self.autoloader.activate_modules()
                self.active_modules = list(modules.keys())
                logging.info(f"[RaSelfMaster] –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏: {self.active_modules}")
                # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤ —É –º–æ–¥—É–ª–µ–π
                for name, mod in modules.items():
                    if hasattr(mod, "start") and asyncio.iscoroutinefunction(mod.start):
                        task = asyncio.create_task(mod.start())
                        self._tasks.append(task)
                        logging.info(f"[RaSelfMaster] –ú–æ–¥—É–ª—å {name} –∑–∞–ø—É—â–µ–Ω.")
            except Exception as e:
                logging.warning(f"[RaSelfMaster] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª–∏: {e}")

        # 2) —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç (–æ–±–Ω–æ–≤–ª—è–µ–º last_updated)
        try:
            self.sync_manifest()
        except Exception as e:
            logging.warning(f"[RaSelfMaster] –û—à–∏–±–∫–∞ –ø—Ä–∏ sync_manifest: {e}")

        # 3) –µ—Å–ª–∏ –º–æ–¥—É–ª—å –ø–æ–ª–∏—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
        try:
            if "ra_police" in self.active_modules:
                try:
                    mod = self.autoloader.get_module("ra_police") if self.autoloader else None
                    if mod and hasattr(mod, "RaPolice"):
                        self.police = mod.RaPolice()
                    else:
                        from modules.ra_police import RaPolice  # type: ignore
                        self.police = RaPolice()
                    logging.info("[RaSelfMaster] –ú–æ–¥—É–ª—å –ø–æ–ª–∏—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                except Exception as e:
                    logging.warning(f"[RaSelfMaster] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å police: {e}")
        except Exception:
            pass

        # 4) –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç—á—ë—Ç
        summary = {
            "message": "üåû –†–∞ –æ—Å–æ–∑–Ω–∞–ª —Å–µ–±—è –∏ –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é!",
            "active_modules": self.active_modules,
            "time": datetime.now(timezone.utc).isoformat()
        }
        logging.info(f"[RaSelfMaster] {summary}")

        # –ï—Å–ª–∏ –ø–æ–ª–∏—Ü–∏—è –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        try:
            if self.police:
                self.police.check_integrity()
        except Exception as e:
            logging.warning(f"[RaSelfMaster] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ police.check_integrity: {e}")

        return summary["message"]

    def reflect(self, theme: str, context: str):
        return self.thinker.reflect(theme, context)

    def manifest(self, theme: str):
        return self.creator.compose_manifesto(theme)

    def unify(self, *texts: str):
        return self.synth.synthesize(*texts)

    def status(self):
        return {
            "mood": self.mood,
            "thinker": len(self.thinker.thoughts),
            "active_modules": self.active_modules,
            "modules": ["thinker", "creator", "synthesizer"]
        }

    # --- –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º ---
    def load_manifest(self):
        try:
            if os.path.exists(self.manifest_path):
                with open(self.manifest_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return data
        except Exception as e:
            logging.error(f"[RaSelfMaster] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
        # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π
        base = {"name": "–†–∞", "version": "1.0.0", "active_modules": []}
        try:
            os.makedirs(os.path.dirname(self.manifest_path), exist_ok=True)
            with open(self.manifest_path, "w", encoding="utf-8") as f:
                json.dump(base, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.warning(f"[RaSelfMaster] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç: {e}")
        return base

    def sync_manifest(self):
        if not self.manifest:
            self.manifest = {"active_modules": []}
        if self.autoloader:
            loaded = list(self.autoloader.modules.keys())
            if loaded:
                merged = list(dict.fromkeys((self.manifest.get("active_modules", []) + loaded)))
                self.manifest["active_modules"] = merged
                self.active_modules = merged
        self.manifest["meta"] = self.manifest.get("meta", {})
        self.manifest["meta"]["last_updated"] = datetime.now(timezone.utc).isoformat()
        try:
            os.makedirs(os.path.dirname(self.manifest_path), exist_ok=True)
            with open(self.manifest_path, "w", encoding="utf-8") as f:
                json.dump(self.manifest, f, ensure_ascii=False, indent=2)
            logging.info("[RaSelfMaster] –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            logging.error(f"[RaSelfMaster] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")

    # --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–∏—Ü–∏–∏ ---
    def police_status(self):
        if not self.police:
            return {"police": "not_loaded"}
        try:
            return self.police.status()
        except Exception as e:
            logging.error(f"[RaSelfMaster] –û—à–∏–±–∫–∞ police.status: {e}")
            return {"police": "error", "error": str(e)}

    def run_backup(self):
        if not self.police:
            return {"backup": "police_not_available"}
        try:
            return self.police.create_backup()
        except Exception as e:
            logging.error(f"[RaSelfMaster] –û—à–∏–±–∫–∞ police.create_backup: {e}")
            return {"backup": "error", "error": str(e)}

    async def stop_modules(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"""
        for task in self._tasks:
            task.cancel()
        self._tasks.clear()
