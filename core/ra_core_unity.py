# core/ra_core_unity.py
import os
import json
import logging
import asyncio
import shutil
from datetime import datetime
from typing import Optional, Dict, Any, List

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ ‚Äî graceful fallback
try:
    from ra_repo_manager import create_new_module, auto_register_module, commit_and_push_changes, ra_repo_autoupdate
except Exception:
    create_new_module = None
    auto_register_module = None
    commit_and_push_changes = None
    ra_repo_autoupdate = None

try:
    from gpt_module import ask_openrouter_with_fallback as gpt_ask
except Exception:
    gpt_ask = None

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ aiogram –≤ –º–æ–¥—É–ª–µ ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Router/Message –∏ —Ç.–¥.
try:
    from aiogram import Router, types
    from aiogram.filters import Command
    has_aiogram = True
except Exception:
    has_aiogram = False

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
MANIFEST_PATH = os.getenv("RA_MANIFEST_PATH", "data/ra_manifest.json")
BACKUP_FOLDER = os.getenv("RA_BACKUP_FOLDER", "ra_backups")
MODULES_FOLDER = os.getenv("RA_MODULES_FOLDER", "modules")
AUTO_EXPAND_INTERVAL = int(os.getenv("RA_AUTO_EXPAND_INTERVAL_SECONDS", 6 * 3600))  # 6 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logging.basicConfig(level=logging.INFO)
os.makedirs(BACKUP_FOLDER, exist_ok=True)
os.makedirs(MODULES_FOLDER, exist_ok=True)

# --- –ó–∞–≥—Ä—É–∑–∫–∞/—Ä–∞–±–æ—Ç–∞ —Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º ---
def load_manifest() -> Dict[str, Any]:
    if not os.path.exists(MANIFEST_PATH):
        logging.warning(f"–ú–∞–Ω–∏—Ñ–µ—Å—Ç {MANIFEST_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω.")
        return {}
    try:
        with open(MANIFEST_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
        return {}

def save_manifest(data: Dict[str, Any]):
    try:
        os.makedirs(os.path.dirname(MANIFEST_PATH) or ".", exist_ok=True)
        with open(MANIFEST_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logging.info("–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")

def get_trusted_ids() -> List[int]:
    mf = load_manifest()
    awakened = mf.get("awakened_beings") or mf.get("awakened", {})
    ids: List[int] = []
    if isinstance(awakened, dict):
        for k, v in awakened.items():
            try:
                if isinstance(v, dict) and "id" in v:
                    ids.append(int(v["id"]))
            except Exception:
                pass
    if not ids:
        ids = [5694569448, 6300409407]
    return ids

def is_trusted(user_id: int) -> bool:
    try:
        return int(user_id) in get_trusted_ids()
    except Exception:
        return False

# --- –ë—ç–∫–∞–ø –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ ---
def backup_manifest() -> Optional[str]:
    if not os.path.exists(MANIFEST_PATH):
        logging.debug("–ë—ç–∫–∞–ø: –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None
    ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    dest = os.path.join(BACKUP_FOLDER, f"manifest_{ts}.json")
    try:
        shutil.copy2(MANIFEST_PATH, dest)
        logging.info(f"üíæ –ë—ç–∫–∞–ø –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω: {dest}")
        return dest
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
        return None

# --- –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (self_dev) ---
async def analyze_code_file(path: str, use_gpt: bool = True) -> List[str]:
    suggestions: List[str] = []
    if not os.path.exists(path):
        return [f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω."]

    try:
        with open(path, "r", encoding="utf-8") as f:
            code = f.read()
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"]

    # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if "TODO" in code or "# TODO" in code:
        suggestions.append("–ù–∞–π–¥–µ–Ω—ã TODO ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –∑–∞–¥–∞—á–∏/issues.")
    if "print(" in code and "logging" not in code:
        suggestions.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è print ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ logging.")
    if "subprocess.run" in code:
        suggestions.append("–í –∫–æ–¥–µ –µ—Å—Ç—å subprocess ‚Äî –ø—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
    if len(code.splitlines()) > 2000:
        suggestions.append("–§–∞–π–ª –±–æ–ª—å—à–æ–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –º–æ–¥—É–ª–∏.")

    # GPT-–∞–Ω–∞–ª–∏–∑
    if use_gpt and gpt_ask:
        try:
            prompt = (
                "–î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ python-—Ñ–∞–π–ª–∞. "
                "–ü–µ—Ä–µ—á–∏—Å–ª–∏ 6-10 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–±–µ–∑ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π).\n\n"
                "–§–∞–π–ª:\n" + code[:20000]
            )
            out = None
            try:
                out = await gpt_ask("ra_self_dev", [{"role":"user","content": prompt}], append_user_memory=None)
            except TypeError:
                out = gpt_ask("ra_self_dev", [{"role":"user","content": prompt}], append_user_memory=None)
            text = out if isinstance(out, str) else str(out)
            for line in text.splitlines():
                line = line.strip()
                if not line:
                    continue
                if len(line) > 300:
                    line = line[:300] + "‚Ä¶"
                suggestions.append(line)
        except Exception as e:
            logging.warning(f"GPT-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–ø–∞–ª: {e}")

    if not suggestions:
        suggestions.append("–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞—à—ë–ª —è–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (flake8, mypy).")

    return suggestions

# --- –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è (self_writer) ---
async def write_module_file(module_name: str, content: str, register: bool = False, author_id: Optional[int] = None) -> str:
    safe_name = module_name.replace(" ", "_").lower()
    filename = safe_name if safe_name.endswith(".py") else safe_name + ".py"
    path = os.path.join(MODULES_FOLDER, filename)
    try:
        os.makedirs(os.path.dirname(path) or ".", exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            f.write("# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –†–∞\n")
            f.write(f"# module: {module_name}\n")
            f.write(f"# created_at: {datetime.utcnow().isoformat()}Z\n\n")
            f.write(content)
        logging.info(f"üì¶ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}"

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ ra_repo_manager, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if auto_register_module:
        try:
            await asyncio.to_thread(auto_register_module, module_name)
            if commit_and_push_changes:
                await asyncio.to_thread(commit_and_push_changes, commit_msg=f"–î–æ–±–∞–≤–ª–µ–Ω –º–æ–¥—É–ª—å {module_name} (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)")
            logging.info("–ú–æ–¥—É–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã —á–µ—Ä–µ–∑ ra_repo_manager (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã).")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å/–∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ ra_repo_manager: {e}")

    return path

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–Ω–µ—à–Ω—è—è —Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è ---
async def safe_create_module(user_id: int, user_name: str, module_name: str, description: str) -> str:
    if not is_trusted(user_id):
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å, –Ω–æ –Ω–µ –≤ trusted.")
        return "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π."

    backup_manifest()

    code_body = (
        f'"""–ú–æ–¥—É–ª—å {module_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°–æ–∑–¥–∞–Ω: {datetime.utcnow().isoformat()}Z\n"""\n\n'
        "def main():\n    print('–ú–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')\n\nif __name__ == '__main__':\n    main()\n"
    )

    if gpt_ask:
        try:
            prompt = (
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π python-–º–æ–¥—É–ª—å —Å –∏–º–µ–Ω–µ–º `{module_name}`.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å docstring, main() –∏ –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.\n"
                "–ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ –Ω–µ –¥–µ–ª–∞–π —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤."
            )
            out = None
            try:
                out = await gpt_ask(user_id, [{"role":"user","content":prompt}], append_user_memory=None)
            except TypeError:
                out = gpt_ask(user_id, [{"role":"user","content":prompt}], append_user_memory=None)
            if isinstance(out, str) and len(out) > 20:
                code_body = out
        except Exception as e:
            logging.warning(f"GPT –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–¥ (–æ—à–∏–±–∫–∞): {e}")

    path_or_msg = await write_module_file(module_name, code_body, register=True, author_id=user_id)

    try:
        manifest = load_manifest()
        modules = manifest.setdefault("modules", {})
        modules[module_name] = os.path.basename(path_or_msg) if os.path.exists(path_or_msg) else path_or_msg
        manifest["modules"] = modules
        save_manifest(manifest)
        logging.info(f"–ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: –º–æ–¥—É–ª—å {module_name} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç: {e}")

    if commit_and_push_changes:
        try:
            await asyncio.to_thread(commit_and_push_changes, commit_msg=f"–î–æ–±–∞–≤–ª–µ–Ω –º–æ–¥—É–ª—å {module_name} (safe_create)")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç —á–µ—Ä–µ–∑ commit_and_push_changes: {e}")

    return f"‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω: {path_or_msg}"

# --- –ê–≤—Ç–æ-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (guardian/self_dev loop) ---
async def auto_expand(user_id: int):
    if not is_trusted(user_id):
        logging.debug("auto_expand: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ trusted ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
        return

    module_name = f"ra_generated_{int(datetime.utcnow().timestamp())}"
    description = "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑."
    logging.info(f"auto_expand: —Å–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª—å {module_name} –¥–ª—è {user_id}")
    res = await safe_create_module(user_id, "trusted", module_name, description)
    logging.info(f"auto_expand result: {res}")

async def guardian_loop(user_id: int):
    while True:
        try:
            await auto_expand(user_id)
            await asyncio.sleep(AUTO_EXPAND_INTERVAL)
        except asyncio.CancelledError:
            logging.info("guardian_loop –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ guardian_loop: {e}")
            await asyncio.sleep(60)

# Aiogram Router (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
router = None
if has_aiogram:
    router = Router()
    # ... (router handlers –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
