# core/gpt_module.py
import os
import aiohttp
import logging
import asyncio
from github_commit import create_commit_push

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY")

MODELS = [
    "deepseek/deepseek-r1-0528:free",
    "deepseek/deepseek-chat-v3.1:free",
    "deepseek/deepseek-r1-0528-qwen3-8b:free",
    "tngtech/deepseek-r1t2-chimera:free",
    "mistralai/mistral-small-3.2-24b-instruct:free",
    "deepseek/deepseek-r1:free",
    "qwen/qwen3-14b:free",
    "mistralai/mistral-nemo:free"
]

logging.basicConfig(level=logging.INFO)

# --- –§—É–Ω–∫—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter ---
async def ask_openrouter_single(session, user_id, messages, model, append_user_memory=None, _parse_openrouter_response=None):
    url = "https://openrouter.ai/api/v1/chat/completions"
    payload = {"model": model, "messages": messages, "temperature": 0.7}
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://iskin-ra.fly.dev",
        "X-Title": "iskin-ra",
    }

    async with session.post(url, headers=headers, json=payload) as resp:
        data = await resp.json()
        choices = data.get("choices")
        if not choices or not isinstance(choices, list):
            raise ValueError(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ choices")
        answer = choices[0]["message"]["content"]
        # –æ—á–∏—â–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        answer = answer.replace("<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>", "").strip()

        if _parse_openrouter_response:
            answer = _parse_openrouter_response(data)
        if append_user_memory:
            append_user_memory(user_id, messages[-1]["content"], answer)
        return answer

# --- –û–±—ë—Ä—Ç–∫–∞ —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –º–æ–¥–µ–ª–µ–π ---
async def ask_openrouter_with_fallback(user_id, messages_payload, append_user_memory=None, _parse_openrouter_response=None):
    async with aiohttp.ClientSession() as session:
        errors = []
        for model in MODELS:
            try:
                logging.info(f"üí° –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å {model}")
                return await ask_openrouter_single(
                    session, user_id, messages_payload, model,
                    append_user_memory, _parse_openrouter_response
                )
            except Exception as e:
                err_str = str(e)
                if "429" in err_str:
                    logging.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è {model}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å...")
                    errors.append(f"{model}: {err_str}")
                    continue
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model}: {err_str}")
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err_str}"

    logging.error("‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã:\n" + "\n".join(errors))
    return "‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôè"
# --- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ ---
safe_ask_openrouter = ask_openrouter_with_fallback

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    user_id = "user123"
    messages_payload = [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç, –†–∞!"}]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter
    answer = await ask_openrouter_with_fallback(user_id, messages_payload)
    logging.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç Ra: {answer}")
    
# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    asyncio.run(main())
