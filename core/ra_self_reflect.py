# core/ra_self_reflect.py
import os
import json
import logging
from datetime import datetime
from pathlib import Path

REFLECTION_LOG = Path("logs/self_reflection.log")
KNOWLEDGE_FOLDER = Path("RaSvet")

REFLECTION_LOG.parent.mkdir(parents=True, exist_ok=True)

class RaSelfReflector:
    def __init__(self):
        self.last_reflection = None
        self.log("ü™û –ú–æ–¥—É–ª—å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def log(self, msg: str):
        timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
        line = f"{timestamp} {msg}"
        print(line)
        try:
            with open(REFLECTION_LOG, "a", encoding="utf-8") as f:
                f.write(line + "\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")

    async def self_reflect_and_update(self):
        self.log("ü§î –†–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        summary = {"timestamp": datetime.now().isoformat(), "insights": [], "actions": []}

        file_count = 0
        try:
            if KNOWLEDGE_FOLDER.exists():
                file_count = sum(1 for _ in KNOWLEDGE_FOLDER.rglob("*"))
                summary["insights"].append(f"üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–Ω–∞–Ω–∏–π: {file_count}")
                idea_files = list(KNOWLEDGE_FOLDER.rglob("*.json"))
                if idea_files:
                    summary["insights"].append(f"üí° –ù–∞–π–¥–µ–Ω–æ {len(idea_files)} JSON-—Ñ–∞–π–ª–æ–≤ –∏–¥–µ–π.")
            else:
                summary["insights"].append("‚ö†Ô∏è –ü–∞–ø–∫–∞ RaSvet –ø–æ–∫–∞ –ø—É—Å—Ç–∞ ‚Äî –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –∑–Ω–∞–Ω–∏–π.")
        except Exception as e:
            summary["insights"].append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –ø–∞–ø–∫–∏ –∑–Ω–∞–Ω–∏–π: {e}")

        try:
            if Path("logs").exists():
                log_files = [f for f in Path("logs").iterdir() if f.suffix == ".log"]
                summary["insights"].append(f"ü™∂ –õ–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã: {len(log_files)}")
        except Exception as e:
            summary["insights"].append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ª–æ–≥–æ–≤: {e}")

        if file_count > 50:
            summary["actions"].append("–†–∞ –æ—Å–æ–∑–Ω–∞—ë—Ç —Ä–æ—Å—Ç –∑–Ω–∞–Ω–∏–π. –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É –≤–∏—Ç–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è.")
        else:
            summary["actions"].append("–†–∞ –æ—â—É—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏. –ù—É–∂–Ω–æ –≤–ø–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –°–≤–µ—Ç–∞.")

        reflection_file = Path("logs") / f"reflection_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(reflection_file, "w", encoding="utf-8") as f:
                json.dump(summary, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")

        self.last_reflection = summary
        self.log("‚ú® –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤–æ–µ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
        return summary

    def get_last_reflection(self):
        if self.last_reflection:
            return self.last_reflection
        if REFLECTION_LOG.exists():
            try:
                lines = REFLECTION_LOG.read_text(encoding="utf-8").splitlines()[-10:]
                return {"last_lines": lines}
            except Exception:
                return {"message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏."}
        return {"message": "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏."}
