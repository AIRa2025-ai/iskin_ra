# github_commit.py
import os
import requests
import logging
import base64
from typing import Dict, Union

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO = os.getenv("GITHUB_REPO", "AIRa2025-ai/iskin_ra")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ env

if not GITHUB_TOKEN:
    raise RuntimeError("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json",
}

REQUEST_TIMEOUT = 20  # —Å–µ–∫—É–Ω–¥

def _create_blob(content: Union[str, bytes]) -> str:
    """–°–æ–∑–¥–∞—ë—Ç blob –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç sha. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç str (utf-8) –∏–ª–∏ bytes (–±–∏–Ω–∞—Ä)."""
    if isinstance(content, str):
        payload = {"content": content, "encoding": "utf-8"}
    else:
        b64 = base64.b64encode(content).decode("ascii")
        payload = {"content": b64, "encoding": "base64"}

    r = requests.post(f"https://api.github.com/repos/{REPO}/git/blobs",
                      headers=HEADERS, json=payload, timeout=REQUEST_TIMEOUT)
    r.raise_for_status()
    return r.json()["sha"]

def create_commit_push(branch_name: str, files_dict: Dict[str, Union[str, bytes]], commit_message: str = "üåÄ auto-update by Ra"):
    """
    files_dict: {path_in_repo: content}, content can be str or bytes.
    –°–æ–∑–¥–∞—ë—Ç –≤–µ—Ç–∫—É, –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã (blobs -> tree -> commit) –∏ –¥–µ–ª–∞–µ—Ç PR.
    """
    try:
        # 1) –±–∞–∑–æ–≤—ã–π –∫–æ–º–º–∏—Ç main
        r = requests.get(f"https://api.github.com/repos/{REPO}/git/ref/heads/main", headers=HEADERS, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        base_commit_sha = r.json()["object"]["sha"]

        # 2) –ø–æ–ª—É—á–∞–µ–º tree SHA
        r = requests.get(f"https://api.github.com/repos/{REPO}/git/commits/{base_commit_sha}", headers=HEADERS, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        base_tree_sha = r.json()["tree"]["sha"]

        # 3) —Å–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
        branch_ref = f"refs/heads/{branch_name}"
        r = requests.post(f"https://api.github.com/repos/{REPO}/git/refs",
                          headers=HEADERS,
                          json={"ref": branch_ref, "sha": base_commit_sha},
                          timeout=REQUEST_TIMEOUT)
        if r.status_code not in (200, 201):
            if r.status_code == 422:
                logging.warning(f"‚ö†Ô∏è –í–µ—Ç–∫–∞ {branch_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
            else:
                r.raise_for_status()

        # 4) —Å–æ–∑–¥–∞—ë–º blobs
        tree_items = []
        for path, content in files_dict.items():
            blob_sha = _create_blob(content)
            tree_items.append({
                "path": path,
                "mode": "100644",
                "type": "blob",
                "sha": blob_sha
            })

        # 5) —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        r = requests.post(f"https://api.github.com/repos/{REPO}/git/trees",
                          headers=HEADERS,
                          json={"base_tree": base_tree_sha, "tree": tree_items},
                          timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        new_tree_sha = r.json()["sha"]

        # 6) —Å–æ–∑–¥–∞—ë–º –∫–æ–º–º–∏—Ç
        r = requests.post(f"https://api.github.com/repos/{REPO}/git/commits",
                          headers=HEADERS,
                          json={"message": commit_message, "tree": new_tree_sha, "parents": [base_commit_sha]},
                          timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        commit_sha = r.json()["sha"]

        # 7) –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–∫—É
        r = requests.patch(f"https://api.github.com/repos/{REPO}/git/refs/heads/{branch_name}",
                           headers=HEADERS, json={"sha": commit_sha}, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()

        # 8) —Å–æ–∑–¥–∞—ë–º PR
        r = requests.post(f"https://api.github.com/repos/{REPO}/pulls",
                          headers=HEADERS,
                          json={"title": commit_message, "head": branch_name, "base": "main"},
                          timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        pr_data = r.json()
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω PR #{pr_data['number']} ‚Äî {pr_data['html_url']}")
        return pr_data

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ create_commit_push")
        raise
