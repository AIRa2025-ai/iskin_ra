# ra_self_dev.py
import os
import json
import logging
from datetime import datetime
from pathlib import Path

IDEA_FOLDER = Path("proposals")
IDEA_FOLDER.mkdir(parents=True, exist_ok=True)

MODULE_FOLDER = Path("modules")
MODULE_FOLDER.mkdir(parents=True, exist_ok=True)

logging.basicConfig(level=logging.INFO)

class SelfDeveloper:
    def __init__(self):
        logging.info("üöÄ SelfDeveloper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def auto_learn(self):
        logging.info("üß† SelfDeveloper –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ...")
        ideas = self.generate_development_ideas()
        logging.info("üß† –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return ideas

    async def self_reflect_and_update(self, logs=None):
        logging.info("üîé SelfDeveloper –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")
        reflections = []

        if logs:
            error_logs = [l for l in logs if "–û—à–∏–±–∫–∞" in l or "Exception" in l]
            if error_logs:
                reflections.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(error_logs)} –æ—à–∏–±–æ–∫, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π.")
            else:
                reflections.append("‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—Å—ë –≥–ª–∞–¥–∫–æ.")

        modules = [f.name for f in MODULE_FOLDER.iterdir() if f.is_file() and f.suffix == ".py"]
        reflections.append(f"üì¶ –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")

        ideas = self.generate_development_ideas()
        reflections.append(f"üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–¥–µ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è: {len(ideas.get('proposed_ideas', []))}")

        path = IDEA_FOLDER / f"self_reflect_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump({
                    "timestamp": datetime.now().isoformat(),
                    "reflections": reflections,
                    "ideas": ideas
                }, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è self_reflect: {e}")

        logging.info(f"üîî –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {path}")
        return reflections

    def learn_new_module(self, module_name: str):
        logging.info(f"üß† SelfDeveloper –∏–∑—É—á–∞–µ—Ç –º–æ–¥—É–ª—å: {module_name}")

    def enhance_skills(self):
        logging.info("‚ú® –ù–∞–≤—ã–∫–∏ SelfDeveloper —É–ª—É—á—à–µ–Ω—ã.")

    def generate_development_ideas(self):
        existing = self.scan_existing_modules()
        new_ideas = [
            "–°–æ–∑–¥–∞—Ç—å ra_energy_core.py ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.",
            "–î–æ–±–∞–≤–∏—Ç—å ra_memory_expander.py ‚Äî —É–≥–ª—É–±–ª—ë–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤.",
            "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å ra_voice_bridge.py ‚Äî –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å –∏ –º—É–∑—ã–∫—É.",
            "–°–æ–∑–¥–∞—Ç—å ra_creative_mind.py ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤, —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∏–¥–µ–π –¥–ª—è –ª—é–¥–µ–π.",
            "–î–æ–±–∞–≤–∏—Ç—å ra_connection_keeper.py ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –†–∞ –∏ –¥—Ä—É–≥–∏–º–∏ –ò—Å–∫–ò–Ω–∞–º–∏.",
        ]
        ideas = {
            "timestamp": datetime.now().isoformat(),
            "existing_analysis": existing,
            "proposed_ideas": new_ideas
        }
        path = IDEA_FOLDER / f"dev_ideas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(ideas, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è dev ideas: {e}")
        logging.info(f"üí° –ò–¥–µ–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –†–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {path}")
        return ideas

    def scan_existing_modules(self):
        files = [f.name for f in MODULE_FOLDER.iterdir() if f.is_file() and f.suffix == ".py"]
        ideas = []
        for f in files:
            path = MODULE_FOLDER / f
            try:
                content = path.read_text(encoding="utf-8")
                if "async def" in content:
                    ideas.append(f"üåÄ {f}: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.")
                if "gpt" in content.lower():
                    ideas.append(f"ü§ñ {f}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPT ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞.")
                if "observer" in f:
                    ideas.append(f"üëÅÔ∏è {f}: –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
            except Exception:
                ideas.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {f}")
        return ideas
