# ra_guardian.py ‚Äî –ú–æ–¥—É–ª—å —Å–∞–º–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —è–¥—Ä–∞ –†–∞
import os
import json
import logging
import asyncio
from datetime import datetime
import re
from ra_repo_manager import create_new_module, auto_register_module, commit_and_push_changes

class Guardian:
    TRUSTED_USERS = [5694569448, 6300409407]
    MANIFEST_PATH = "ra_manifest.json"
    BACKUP_FOLDER = "backups"
    PROPOSALS_FOLDER = "proposals"

    def __init__(self):
        os.makedirs(self.BACKUP_FOLDER, exist_ok=True)
        os.makedirs(self.PROPOSALS_FOLDER, exist_ok=True)
        logging.basicConfig(level=logging.INFO)
        self.loop_tasks = []

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    async def safe_create_module(self, module_name: str, description: str, user: int):
        """–°–æ–∑–¥–∞—ë—Ç –º–æ–¥—É–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"""
        if user not in self.TRUSTED_USERS:
            logging.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥—É–ª–∏")
            return None

        logging.info(f"üå± –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å {module_name}...")
        file_path = await create_new_module(module_name, description, user)
        if file_path:
            await auto_register_module(module_name)
            logging.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω")
            await commit_and_push_changes(commit_msg=f"–°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å {module_name} –†–∞")
        return file_path

    def backup_manifest(self):
        """–î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
        if os.path.exists(self.MANIFEST_PATH):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(self.BACKUP_FOLDER, f"manifest_{timestamp}.json")
            try:
                with open(self.MANIFEST_PATH, "r", encoding="utf-8") as f:
                    data = f.read()
                with open(backup_path, "w", encoding="utf-8") as f:
                    f.write(data)
                logging.info(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {backup_path}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")

    def analyze_repository(self) -> list:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –º–æ–¥—É–ª—è–º"""
        existing_files = os.listdir(".")
        proposals = []

        missing_features = []
        if not any("observer" in f for f in existing_files):
            missing_features.append("Nablyudenie_za_sobytiyami_v_mire")
        if not any("reflection" in f for f in existing_files):
            missing_features.append("Samoanliz_i_osoznanie_opyta")
        if not any("optimizer" in f for f in existing_files):
            missing_features.append("Optimizatsiya_resursov_i_protsessov")
        if not any("context_keeper" in f for f in existing_files):
            missing_features.append("Khranenie_konteksta_dialogov_i_znaniy")

        for feature in missing_features:
            safe_name = re.sub(r'[^a-zA-Z0-9_]', '_', feature)
            module_name = f"ra_{safe_name}_{int(datetime.now().timestamp())}"
            description = f"–ú–æ–¥—É–ª—å: {feature}"
            example_code = f'''# {module_name}.py ‚Äî {feature}
import logging

def init():
    logging.info("üîÆ –ú–æ–¥—É–ª—å {feature} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
'''
            proposals.append({
                "module_name": module_name,
                "description": description,
                "example_code": example_code
            })

        return proposals

    async def propose_new_modules(self, user: int):
        """–†–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        proposals = self.analyze_repository()
        if not proposals:
            logging.info("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.")
            return []

        path = os.path.join(self.PROPOSALS_FOLDER, f"{user}_proposals.json")
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(proposals, f, ensure_ascii=False, indent=2)
            logging.info(f"üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {path}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")

        return proposals

    async def auto_expand(self, user: int):
        """–ê–≤—Ç–æ-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —è–¥—Ä–∞ –†–∞"""
        proposals = await self.propose_new_modules(user)
        if proposals:
            first = proposals[0]
            logging.info(f"‚ú® –ê–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è: {first['module_name']}")
            await self.safe_create_module(first["module_name"], first["description"], user)

    async def guardian_loop(self, user: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"""
        while True:
            try:
                self.backup_manifest()
                await self.auto_expand(user)
                await asyncio.sleep(6 * 3600)
            except asyncio.CancelledError:
                logging.info("üîß guardian_loop –æ—Ç–º–µ–Ω—ë–Ω")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ guardian_loop: {e}")
                await asyncio.sleep(60)

    def start(self):
        """–ó–∞–ø—É—Å–∫ guardian_loop –¥–ª—è –≤—Å–µ—Ö –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        for u in self.TRUSTED_USERS:
            task = asyncio.create_task(self.guardian_loop(u))
            self.loop_tasks.append(task)
