# core/ra_bot_gpt.py
import os
import json
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message

from gpt_module import safe_ask_openrouter
from ra_autoloader import RaAutoloader
from ra_self_master import RaSelfMaster

autoloader = RaAutoloader()
modules = autoloader.activate_modules()
self_master = RaSelfMaster()

print(self_master.awaken())

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
os.makedirs("logs", exist_ok=True)
log_path = "logs/command_usage.json"
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ---
def log_command_usage(user_id: int, command: str):
    try:
        data = []
        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        data.append({"user_id": user_id, "command": command, "time": datetime.now().isoformat()})
        cutoff = datetime.now() - timedelta(days=10)
        data = [x for x in data if datetime.fromisoformat(x["time"]) > cutoff]
        with open(log_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def process_user_message(message: Message):
    text = message.text.strip()
    log_command_usage(message.from_user.id, text)
    await message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        messages_payload = [{"role": "user", "content": text}]
        response = await safe_ask_openrouter(message.from_user.id, messages_payload)

        if response:
            if len(response) > 4000:
                os.makedirs("data", exist_ok=True)
                filename = f"data/response_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(response)
                await message.answer(f"üìÑ –û—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ–≥–æ –≤ —Ñ–∞–π–ª:\n{filename}")
            else:
                await message.answer(response)
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò—Å–∫–ò–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    log_command_usage(message.from_user.id, "/start")
    await message.answer("üåû –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –†–∞, –ü—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –ø—Ä–æ–µ–∫—Ç–∞ –†–∞–°–≤–µ—Ç.\n–ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    log_command_usage(message.from_user.id, "/help")
    await message.answer("‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å\n/clean ‚Äî –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")

@dp.message(Command("clean"))
async def cmd_clean(message: Message):
    if os.path.exists(log_path):
        os.remove(log_path)
        await message.answer("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")
    else:
        await message.answer("‚ö†Ô∏è –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

@dp.message(F.text)
async def on_text(message: Message):
    await process_user_message(message)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("üöÄ –ë–æ—Ç –†–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
