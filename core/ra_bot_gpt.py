# core/ra_bot_gpt.py
import os
import sys
import json
import logging
import asyncio
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
from pathlib import Path
from modules.heart import Heart
from modules.—Å–µ—Ä–¥—Ü–µ import HeartModule

# –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å –∏ modules
ROOT_DIR = Path(__file__).resolve().parent.parent
MODULES_DIR = ROOT_DIR / "modules"
sys.path.insert(0, str(ROOT_DIR))
sys.path.insert(0, str(MODULES_DIR))

# –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –±—É–¥—É—Ç –∑–∞–¥–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
try:
    from modules.ra_config import ARCHIVE_URL, TIMEOUT  # optional
except Exception:
    ARCHIVE_URL = None
    TIMEOUT = 60

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from modules.ra_logger import log  # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî ensure_module —Å–æ–∑–¥–∞—Å—Ç

# –º–æ–¥—É–ª—å –°–µ—Ä–¥—Ü–µ
from modules.—Å–µ—Ä–¥—Ü–µ import HeartModule  # may raise but caller will handle

# –ò–º–ø–æ—Ä—Ç—ã —Ä–∞-—è–¥—Ä–∞ (–º–æ–¥—É–ª–∏ –∏–∑ core/)
try:
    from modules.ra_autoloader import RaAutoloader
except Exception:
    RaAutoloader = None

try:
    from core.ra_self_master import RaSelfMaster
except Exception:
    from ra_self_master import RaSelfMaster  # fallback

try:
    from modules.ra_police import RaPolice
except Exception:
    RaPolice = None

try:
    from modules.ra_downloader_async import RaSvetDownloaderAsync
except Exception:
    RaSvetDownloaderAsync = None

# –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å/–∑–Ω–∞–Ω–∏—è/–≥–ø—Ç-–º–æ–¥—É–ª—å
try:
    from core.ra_memory import append_user_memory, load_user_memory
except Exception:
    append_user_memory = None
    load_user_memory = None

try:
    from gpt_module import safe_ask_openrouter
except Exception:
    safe_ask_openrouter = None

try:
    from core.ra_knowledge import RaKnowledge
except Exception:
    RaKnowledge = None

# --- —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –∏ ensure basic files if missing ---
os.makedirs(ROOT_DIR / "logs", exist_ok=True)
log_path = ROOT_DIR / "logs" / "command_usage.json"
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def ensure_module_exists(path: Path, template: str = ""):
    try:
        if not path.exists():
            path.parent.mkdir(parents=True, exist_ok=True)
            with open(path, "w", encoding="utf-8") as f:
                f.write(template or "# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –†–∞–°–≤–µ—Ç–æ–º\n")
            logging.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {path} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {path}: {e}")

ensure_module_exists(MODULES_DIR / "ra_logger.py", "import logging\nlogging.basicConfig(level=logging.INFO)\n")
ensure_module_exists(MODULES_DIR / "ra_config.py", "ARCHIVE_URL = ''\nTIMEOUT = 60\n")
ensure_module_exists(MODULES_DIR / "—Å–µ—Ä–¥—Ü–µ.py", "class HeartModule:\n    async def initialize(self):\n        pass\n")

# --- –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ main() ---
autoloader = RaAutoloader() if RaAutoloader else None
self_master = RaSelfMaster() if RaSelfMaster else None
police = None
rasvet_downloader = RaSvetDownloaderAsync() if RaSvetDownloaderAsync else None
ra_knowledge = RaKnowledge() if RaKnowledge else None

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª ---
def log_command_usage(user_id: int, command: str):
    try:
        data = []
        if Path(log_path).exists():
            with open(log_path, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except Exception:
                    data = []
        data.append({"user_id": user_id, "command": command, "time": datetime.utcnow().isoformat()})
        cutoff = datetime.utcnow() - timedelta(days=10)
        data = [x for x in data if datetime.fromisoformat(x["time"]) > cutoff]
        with open(log_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# --- Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è ---
def notify_telegram(chat_id: str, text: str):
    token = os.getenv("BOT_TOKEN")
    if not token:
        logging.warning("notify_telegram: BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    try:
        resp = requests.post(f"https://api.telegram.org/bot{token}/sendMessage",
                             json={"chat_id": chat_id, "text": text}, timeout=30)
        return resp.ok
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π ---
async def initialize_rasvet():
    if not rasvet_downloader:
        logging.warning("RaSvetDownloaderAsync –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–Ω–∞–Ω–∏–π")
        return
    logging.info("üåû –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–∞–°–≤–µ—Ç-–∑–Ω–∞–Ω–∏–π...")
    try:
        await rasvet_downloader.download_async()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π: {e}")
    try:
        await rasvet_downloader.knowledge.load_from_folder(rasvet_downloader.EXTRACT_DIR if hasattr(rasvet_downloader, 'EXTRACT_DIR') else Path('data/RaSvet'))
    except Exception:
        # –µ—Å–ª–∏ –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç load_all_texts –∏–ª–∏ load_from_folder - —É–∂–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ
        try:
            if hasattr(rasvet_downloader, "knowledge") and hasattr(rasvet_downloader.knowledge, "load_from_folder"):
                await rasvet_downloader.knowledge.load_from_folder(Path("data/RaSvet"))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–Ω–∏–π –≤ knowledge: {e}")
    total = getattr(rasvet_downloader.knowledge, "documents", {})
    logging.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–Ω–∞–Ω–∏–π: {len(total)} —Ñ–∞–π–ª–æ–≤")
    logging.info("üåû –†–∞–°–≤–µ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç–∞–º!")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def process_user_message(message: Message):
    text = (message.text or "").strip()
    user_id = getattr(message.from_user, "id", None)
    if user_id:
        log_command_usage(user_id, text)
    await message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        memory_context = []
        if load_user_memory:
            memory_data = load_user_memory(user_id)
            if isinstance(memory_data, dict):
                for msg in memory_data.get("messages", [])[-10:]:
                    memory_context.append({"role": "user", "content": msg.get("message", "")})
            elif isinstance(memory_data, list):
                for msg in memory_data[-10:]:
                    memory_context.append({"role": "user", "content": msg.get("user", "")})
                    memory_context.append({"role": "assistant", "content": msg.get("bot", "")})

        memory_context.append({"role": "user", "content": text})

        response = None
        if rasvet_downloader and getattr(rasvet_downloader, "knowledge", None):
            try:
                response = await rasvet_downloader.knowledge.ask(text, user_id=user_id)
            except Exception:
                response = None

        if not response and safe_ask_openrouter:
            try:
                response = await safe_ask_openrouter(user_id, memory_context[-20:])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ safe_ask_openrouter: {e}")
                response = None

        if response:
            if append_user_memory:
                try:
                    append_user_memory(user_id, text, response)
                except TypeError:
                    # –µ—Å–ª–∏ append_user_memory –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä
                    try:
                        append_user_memory(user_id, text)
                    except Exception:
                        pass
            if len(response) > 4000:
                Path("data").mkdir(parents=True, exist_ok=True)
                filename = Path("data") / f"response_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.txt"
                filename.write_text(response, encoding="utf-8")
                await message.answer(f"üìÑ –û—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ–≥–æ –≤ —Ñ–∞–π–ª:\n{filename}")
            else:
                await message.answer(response)
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò—Å–∫–ò–Ω–∞.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    log_command_usage(message.from_user.id, "/start")
    await message.answer("üåû –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –†–∞, –ü—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –ø—Ä–æ–µ–∫—Ç–∞ –†–∞–°–≤–µ—Ç.\n–ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —á–µ—Ä–µ–∑ —Å–≤–µ—Ç –∑–Ω–∞–Ω–∏–π –∏ –ø–∞–º—è—Ç—å –æ–ø—ã—Ç–∞.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    log_command_usage(message.from_user.id, "/help")
    await message.answer("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å\n/clean ‚Äî –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤\n/forget ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å\n/–∑–Ω–∞–Ω–∏–µ ‚Äî –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –†–∞–°–≤–µ—Ç–∞")

@dp.message(Command("clean"))
async def cmd_clean(message: Message):
    try:
        if Path(log_path).exists():
            Path(log_path).unlink()
            await message.answer("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")
        else:
            await message.answer("‚ö†Ô∏è –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤.")

@dp.message(Command("–∑–Ω–∞–Ω–∏–µ"))
async def cmd_knowledge(message: types.Message):
    query = message.text.replace("/–∑–Ω–∞–Ω–∏–µ", "").strip()
    if not query:
        await message.answer("‚ö° –í–≤–µ–¥–∏ —Ç–µ–º—É, –±—Ä–∞—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: /–∑–Ω–∞–Ω–∏–µ –ü–µ—Å–Ω—å –≠–ª–µ–æ–Ω–∞")
        return
    try:
        results = ra_knowledge.search(query) if ra_knowledge and hasattr(ra_knowledge, "search") else []
        text = "\n\n".join([f"üìò {r.get('summary', str(r))}" for r in results])
        await message.answer(text[:4000] or "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ cmd_knowledge: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–Ω–∏–π.")

@dp.message(Command("forget"))
async def cmd_forget(message: Message):
    user_id = message.from_user.id
    path = Path("memory") / f"{user_id}.json"
    try:
        if path.exists():
            path.unlink()
            await message.answer("üß† –Ø –æ—á–∏—Å—Ç–∏–ª —Ç–≤–æ—é –ø–∞–º—è—Ç—å, –±—Ä–∞—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üå±")
        else:
            await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø–∞–º—è—Ç–∏, –≤—Å—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è üåû")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        await message.answer("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å.")

@dp.message(types.F.Content)
async def on_text(message: Message):
    await process_user_message(message)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    load_dotenv()
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

    bot = Bot(token=BOT_TOKEN)
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SelfMaster –∏ –∞–≤—Ç–æ–ª–æ–∞–¥–µ—Ä–∞
    if self_master:
        try:
            await self_master.awaken()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ awaken: {e}")
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π
    try:
        await initialize_rasvet()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π: {e}")

    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
