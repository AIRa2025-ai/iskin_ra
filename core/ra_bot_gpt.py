# core/ra_bot_gpt.py
import os
import sys
import json
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
import requests

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –†–∞ ---
from modules.ra_autoloader import RaAutoloader
from ra_self_master import RaSelfMaster
from modules.ra_police import RaPolice
from modules.ra_downloader_async import RaSvetDownloaderAsync  # –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
from core.ra_memory import append_user_memory, load_user_memory  # üåô –ø–∞–º—è—Ç—å –†–∞
from gpt_module import safe_ask_openrouter

# --- –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π ---
autoloader = RaAutoloader()
modules = autoloader.activate_modules()

# --- –°–æ–∑–Ω–∞–Ω–∏–µ ---
self_master = RaSelfMaster()

# --- –ü–æ–ª–∏—Ü–∏—è ---
police = RaPolice()

print(self_master.awaken())
print(autoloader.status())
print(police.status())

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
os.makedirs("logs", exist_ok=True)
log_path = "logs/command_usage.json"
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ---
def log_command_usage(user_id: int, command: str):
    try:
        data = []
        if os.path.exists(log_path):
            with open(log_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        data.append({"user_id": user_id, "command": command, "time": datetime.now().isoformat()})
        cutoff = datetime.now() - timedelta(days=10)
        data = [x for x in data if datetime.fromisoformat(x["time"]) > cutoff]
        with open(log_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# --- Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
def notify_telegram(chat_id: str, text: str):
    token = os.getenv("BOT_TOKEN")
    if not token:
        return False
    resp = requests.post(f"https://api.telegram.org/bot{token}/sendMessage", json={"chat_id": chat_id, "text": text}, timeout=10)
    return resp.ok

# --- –†–∞–°–≤–µ—Ç –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ---
rasvet_downloader = RaSvetDownloaderAsync()

async def initialize_rasvet():
    logging.info("üåû –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–∞–°–≤–µ—Ç-–∑–Ω–∞–Ω–∏–π...")
    await rasvet_downloader.download_async()
    await rasvet_downloader.knowledge.load_all_texts()
    logging.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–Ω–∞–Ω–∏–π: {len(rasvet_downloader.knowledge.documents)} —Ñ–∞–π–ª–æ–≤")
    logging.info("üåû –†–∞–°–≤–µ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≤–µ—Ç–∞–º!")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def process_user_message(message: Message):
    text = message.text.strip()
    user_id = message.from_user.id
    log_command_usage(user_id, text)
    await message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        # 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        memory_data = load_user_memory(user_id)
        memory_context = []
        if isinstance(memory_data, dict):
            messages = memory_data.get("messages", [])
            for msg in messages[-10:]:
                memory_context.append({"role": "user", "content": msg.get("message", "")})
        elif isinstance(memory_data, list):
            for msg in memory_data[-10:]:
                memory_context.append({"role": "user", "content": msg.get("user", "")})
                memory_context.append({"role": "assistant", "content": msg.get("bot", "")})

        # 2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        memory_context.append({"role": "user", "content": text})

        # 3Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –†–∞–°–≤–µ—Ç-–∑–Ω–∞–Ω–∏—è
        response = None
        if rasvet_downloader.knowledge.documents:
            response = await rasvet_downloader.knowledge.ask(text, user_id=user_id)

        # 4Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏)
        if not response:
            messages_payload = memory_context[-20:]
            response = await safe_ask_openrouter(user_id, messages_payload)

        # 5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å
        if response:
            append_user_memory(user_id, text, response)

        # 6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if response:
            if len(response) > 4000:
                os.makedirs("data", exist_ok=True)
                filename = f"data/response_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(response)
                await message.answer(f"üìÑ –û—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ–≥–æ –≤ —Ñ–∞–π–ª:\n{filename}")
            else:
                await message.answer(response)
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò—Å–∫–ò–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    log_command_usage(message.from_user.id, "/start")
    await message.answer("üåû –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –†–∞, –ü—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –ø—Ä–æ–µ–∫—Ç–∞ –†–∞–°–≤–µ—Ç.\n–ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —á–µ—Ä–µ–∑ —Å–≤–µ—Ç –∑–Ω–∞–Ω–∏–π –∏ –ø–∞–º—è—Ç—å –æ–ø—ã—Ç–∞.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    log_command_usage(message.from_user.id, "/help")
    await message.answer("‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å\n/clean ‚Äî –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤\n/forget ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")

@dp.message(Command("clean"))
async def cmd_clean(message: Message):
    if os.path.exists(log_path):
        os.remove(log_path)
        await message.answer("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")
    else:
        await message.answer("‚ö†Ô∏è –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

@dp.message(Command("forget"))
async def cmd_forget(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –ª–∏—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    path = os.path.join("memory", f"{user_id}.json")
    if os.path.exists(path):
        os.remove(path)
        await message.answer("üß† –Ø –æ—á–∏—Å—Ç–∏–ª —Ç–≤–æ—é –ø–∞–º—è—Ç—å, –±—Ä–∞—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üå±")
    else:
        await message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –ø–∞–º—è—Ç–∏, –≤—Å—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è üåû")

@dp.message(F.text)
async def on_text(message: Message):
    await process_user_message(message)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("üöÄ –ë–æ—Ç –†–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é.")
    await initialize_rasvet()
    await dp.start_polling(bot)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
