#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import threading
import logging
import time
import importlib
from pathlib import Path
from fastapi import FastAPI, Request
import uvicorn
import subprocess

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
BASE_DIR = Path(os.getcwd())  # –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
DATA_DIR = BASE_DIR / "data_disk"
LOG_DIR = DATA_DIR / "logs"
MODULES_DIR = Path(__file__).parent / "modules"
sys.path.append(str(MODULES_DIR))

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
LOG_DIR.mkdir(parents=True, exist_ok=True)
DATA_DIR.mkdir(parents=True, exist_ok=True)

# === –õ–û–ì–ò ===
logger = logging.getLogger("RaBot")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï Ra–°–≤–µ—Ç–ê ===
from modules.ra_downloader import RaSvetDownloader

def update_rasvet():
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –†–∞–°–≤–µ—Ç–∞...")
        downloader = RaSvetDownloader()
        downloader.download()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –†–∞–°–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –†–∞–°–≤–µ—Ç–∞: {e}")

rasvet_thread = threading.Thread(target=update_rasvet, daemon=True)
rasvet_thread.start()
rasvet_thread.join()
logger.info("üöÄ –†–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –†–∞–°–≤–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# === –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–†–£–ó–ö–ê –í–°–ï–• –ú–û–î–£–õ–ï–ô ===
loaded_modules = {}
for module_file in MODULES_DIR.glob("*.py"):
    if module_file.name.startswith("__"):
        continue
    module_name = module_file.stem
    try:
        loaded_modules[module_name] = importlib.import_module(module_name)
        logger.info(f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {module_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {module_name}: {e}")

# === –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨ –ó–ê –†–ï–ü–û ===
try:
    import ra_repo_manager
    repo_observer = ra_repo_manager.RepoObserver()
    repo_observer.scan()
    logger.info("üîç –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")

# === –ê–í–¢–û–ü–£–® –ò –†–ï–ó–ï–†–í–´ ===
def auto_push():
    try:
        subprocess.run(["git", "config", "user.name", "Ra Bot"], check=True)
        subprocess.run(["git", "config", "user.email", "ra-bot@example.com"], check=True)
        subprocess.run(["git", "add", "."], check=True)
        subprocess.run(["git", "commit", "-m", "ü§ñ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –†–∞"], check=True)
        subprocess.run(["git", "push", "origin", "main"], check=True)
        logger.info("üöÄ –ê–≤—Ç–æ–ø—É—à –Ω–∞ GitHub –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except subprocess.CalledProcessError:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—É—à–∞")

# === FASTAPI –°–ï–†–í–ï–† ===
app = FastAPI(title="RaSvet API")

@app.get("/status")
async def status():
    return {"status": "Ra alive", "loaded_modules": list(loaded_modules.keys())}

@app.post("/run_module")
async def run_module(request: Request):
    data = await request.json()
    mod_name = data.get("module")
    func_name = data.get("function")
    if mod_name in loaded_modules:
        mod = loaded_modules[mod_name]
        func = getattr(mod, func_name, None)
        if func:
            try:
                result = func()
                return {"result": str(result)}
            except Exception as e:
                return {"error": str(e)}
    return {"error": "–ú–æ–¥—É–ª—å –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

def run_api():
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")

api_thread = threading.Thread(target=run_api, daemon=True)
api_thread.start()

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ë–û–¢–ê ===
def run_bot():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –†–∞–ë–æ—Ç–∞...")
    try:
        while True:
            # –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
            # loaded_modules['ra_file_manager'].check_new_files()
            # repo_observer.update()
            auto_push()  # —Ä–∞–∑ –≤ —Ü–∏–∫–ª –ø—É—à–∏–º –Ω–∞ GitHub
            time.sleep(60)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

if __name__ == "__main__":
    logger.info("üåû –°—Ç–∞—Ä—Ç –†–∞–ë–æ—Ç–∞")
    run_bot()
