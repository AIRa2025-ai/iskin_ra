# core/ra_self_writer.py
import os
import json
import logging
from datetime import datetime

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–ø–æ ‚Äî –æ–Ω —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç content optional
try:
    from ra_repo_manager import create_new_module, auto_register_module, commit_and_push_changes
except Exception:
    create_new_module = None
    auto_register_module = None
    commit_and_push_changes = None

IDEA_FOLDER = "proposals"
TRUSTED_USERS = [5694569448, 6300409407]

logging.basicConfig(level=logging.INFO)

class SelfWriter:
    @staticmethod
    async def generate_code_from_idea(idea_text: str, user: int):
        if user not in TRUSTED_USERS:
            logging.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π")
            return None

        # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "–°–æ–∑–¥–∞—Ç—å ra_name.py ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ..." –∏–ª–∏ "ra_name ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ"
        module_name = None
        try:
            left = idea_text.split("‚Äî")[0].strip()
            toks = left.replace(".py", "").split()
            module_name = toks[0] if toks else None
        except Exception:
            module_name = None

        if not module_name:
            module_name = f"ra_generated_{int(datetime.utcnow().timestamp())}"

        description = "–ù–æ–≤—ã–π –º–æ–¥—É–ª—å –†–∞"
        try:
            if "‚Äî" in idea_text:
                description = idea_text.split("‚Äî", 1)[1].strip()
        except Exception:
            pass

        logging.info(f"‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è: {module_name} ({description})")

        example_code = f'''# {module_name}.py ‚Äî {description}
import logging

def init():
    logging.info("‚öôÔ∏è {module_name} –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def main():
    logging.info("‚ú® {module_name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏.")
'''

        try:
            if create_new_module:
                file_path = await create_new_module(module_name, description, user, content=example_code)
            else:
                # fallback ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ modules/
                path = os.path.join("modules", f"{module_name}.py")
                os.makedirs(os.path.dirname(path), exist_ok=True)
                with open(path, "w", encoding="utf-8") as f:
                    f.write(example_code)
                file_path = path
            if auto_register_module:
                await auto_register_module(module_name)
            if commit_and_push_changes:
                await commit_and_push_changes(commit_msg=f"–°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å {module_name} —á–µ—Ä–µ–∑ ra_self_writer.py")
            logging.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return file_path
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏–∑ –∏–¥–µ–∏: {e}")
            return None

    @staticmethod
    async def process_idea_file(file_path: str, user: int):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            proposed = data.get("proposed_ideas", []) if isinstance(data, dict) else []
            for idea in proposed:
                await SelfWriter.generate_code_from_idea(idea, user)
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–¥–µ–π: {e}")
