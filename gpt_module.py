import os
import aiohttp
import logging

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –ø—Ä–∏ 429
MODELS = [
    "deepseek/deepseek-r1-0528:free",
    "dolphin/dolphin-3.0-mistral-24b:free",
    "meta-llama/llama-3.2-11b-vision-instruct:free",
    "qwen/qwen-3-14B:free",
    "mistral/mistral-small-3.2-24b:free",
    "mistral/mistral-nemo:free",
    "google/gemini-2.0-flash-experimental:free"
]

async def ask_openrouter(user_id, messages, model="deepseek/deepseek-r1-0528:free",
                         append_user_memory=None, _parse_openrouter_response=None):
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏:
    - append_user_memory(user_id, user_input, reply)
    - _parse_openrouter_response(data)
    """
    url = "https://openrouter.ai/api/v1/chat/completions"

    payload = {
        "model": model,
        "messages": messages,
        "temperature": 0.7
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://iskin-ra.fly.dev",
        "X-Title": "iskin-ra",
    }

    logging.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenRouter: {payload}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as resp:
                if resp.status != 200:
                    text = await resp.text()
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ API {resp.status}: {text}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({resp.status}): {text}"

                data = await resp.json()

                # –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                answer = None
                if _parse_openrouter_response:
                    answer = _parse_openrouter_response(data)

                # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç ‚Äî –±–µ—Ä—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
                if not answer:
                    answer = data.get("choices", [{}])[0].get("message", {}).get("content", "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
                if append_user_memory:
                    append_user_memory(user_id, messages[-1]["content"], answer)

                return answer.strip()

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ OpenRouter")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"


async def safe_ask_openrouter(user_id, messages_payload,
                              append_user_memory=None, _parse_openrouter_response=None):
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –ª–∏–º–∏—Ç 429, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    for model in MODELS:
        try:
            return await ask_openrouter(
                user_id, messages_payload, model=model,
                append_user_memory=append_user_memory,
                _parse_openrouter_response=_parse_openrouter_response
            )
        except Exception as e:
            if "429" in str(e):
                logging.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è {model}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å...")
                continue
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏ {model}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

    return "‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ üôè"
