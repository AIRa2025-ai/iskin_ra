import os
import aiohttp
import logging
from github_commit import create_commit_push

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

MODELS = [
    "deepseek/deepseek-r1-0528:free",
    "deepseek/deepseek-chat-v3.1:free",
    "deepseek/deepseek-r1-0528-qwen3-8b:free",
    "tngtech/deepseek-r1t2-chimera:free",
    "mistralai/mistral-small-3.2-24b-instruct:free",
    "deepseek/deepseek-r1:free",
    "qwen/qwen3-14b:free",
    "mistralai/mistral-nemo:free"
]

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è ---
session: aiohttp.ClientSession | None = None

async def get_session():
    global session
    if session is None or session.closed:
        session = aiohttp.ClientSession()
    return session


async def ask_openrouter(session, user_id, messages, model="deepseek/deepseek-r1-0528:free",
                         append_user_memory=None, _parse_openrouter_response=None):
    """
    –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é aiohttp-—Å–µ—Å—Å–∏—é.
    """
    url = "https://openrouter.ai/api/v1/chat/completions"

    payload = {
        "model": model,
        "messages": messages,
        "temperature": 0.7
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://iskin-ra.fly.dev",
        "X-Title": "iskin-ra",
    }

    logging.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenRouter ({model})")

    async with session.post(url, headers=headers, json=payload) as resp:
        text = await resp.text()

        if resp.status != 200:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ API {resp.status}: {text}")
            raise Exception(f"{resp.status}: {text}")

        data = await resp.json()

        # –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        answer = None
        if _parse_openrouter_response:
            answer = _parse_openrouter_response(data)

        # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –±–µ—Ä—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not answer:
            answer = data["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å
        if append_user_memory:
            append_user_memory(user_id, messages[-1]["content"], answer)

        return answer.strip(

        # –ø—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –∏–∑ –∫–æ–¥–∞ –†–∞:
        branch_name = "auto-update-" + str(os.getpid())
        files_dict = {
            "memory_sync.py": "# test 
        change\nprint('Ra updated!')"
        }
        pr = create_commit_push(branch_name, files_dict, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –†–∞")
        print("‚úÖ –°–æ–∑–¥–∞–Ω PR:", pr["html_url"])
    
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏ 429. –ó–∞–∫—Ä—ã–≤–∞–µ—Ç ClientSession –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    async with aiohttp.ClientSession() as session:
        for model in MODELS:
            try:
                return await ask_openrouter(
                    session=session,
                    user_id=user_id,
                    messages=messages_payload,
                    model=model,
                    append_user_memory=append_user_memory,
                    _parse_openrouter_response=_parse_openrouter_response
                )
            except Exception as e:
                err_str = str(e)
                if "429" in err_str:
                    logging.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è {model}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å...")
                    continue
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model}: {err_str}")
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err_str}"

    return "‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôè"
