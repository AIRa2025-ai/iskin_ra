import os
import aiohttp
import logging

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

MODELS = [
    "deepseek/deepseek-r1-0528:free",
    "deepseek/deepseek-chat-v3.1:free",
    "deepseek/deepseek-r1-0528-qwen3-8b:free",
    "tngtech/deepseek-r1t2-chimera:free",
    "mistralai/mistral-small-3.2-24b-instruct:free",
    "cognitivecomputations/dolphin3.0-r1-mistral-24b:free",
    "qwen/qwen3-14b:free",
    "mistralai/mistral-nemo:free"
]

async def ask_openrouter(user_id, messages, model="deepseek/deepseek-r1-0528:free",
                         append_user_memory=None, _parse_openrouter_response=None):
    """
    –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API.
    """
    url = "https://openrouter.ai/api/v1/chat/completions"

    payload = {
        "model": model,
        "messages": messages,
        "temperature": 0.7
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://iskin-ra.fly.dev",
        "X-Title": "iskin-ra",
    }

    logging.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenRouter ({model}): {payload}")

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            text = await resp.text()

            if resp.status != 200:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ API {resp.status}: {text}")
                raise Exception(f"{resp.status}: {text}")  # <-- –∫–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

            data = await resp.json()

            # –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            answer = None
            if _parse_openrouter_response:
                answer = _parse_openrouter_response(data)

            # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –±–µ—Ä—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not answer:
                answer = data["choices"][0]["message"]["content"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å
            if append_user_memory:
                append_user_memory(user_id, messages[-1]["content"], answer)

            return answer.strip()


async def safe_ask_openrouter(user_id, messages_payload,
                              append_user_memory=None, _parse_openrouter_response=None):
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏ 429.
    """
    for model in MODELS:
        try:
            return await ask_openrouter(
                user_id, messages_payload, model=model,
                append_user_memory=append_user_memory,
                _parse_openrouter_response=_parse_openrouter_response
            )
        except Exception as e:
            err_str = str(e)
            if "429" in err_str:
                logging.warning(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è {model}, –ø—Ä–æ–±—É—é —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å...")
                continue
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model}: {err_str}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err_str}"

    return "‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôè"
