import os
import asyncio
import aiohttp
import logging
import httpx

# === üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ===
API_KEY = os.getenv("OPENROUTER_API_KEY")  # –∫–ª—é—á –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_URL = "https://openrouter.ai/api/v1/chat/completions"

COMMON_HEADERS = {
    "Authorization": f"Bearer {API_KEY}" if API_KEY else "",
    "Content-Type": "application/json",
    "HTTP-Referer": "https://iskin-ra.fly.dev",  # —É–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–µ–Ω –Ω–∞ fly.io
    "X-Title": "Ra Bot"
}


# === üåê –ó–∞–ø—Ä–æ—Å –∫ OpenRouter ===
async def ask_openrouter(
    user_id,
    user_input,
    MODEL,
    append_user_memory,
    _parse_openrouter_response
):
    payload = {
        "model": MODEL,
        "messages": user_input,
        "max_tokens": 4000,
    }

    retries = 5
    delay = 3  # —Å–µ–∫—É–Ω–¥
    timeout = aiohttp.ClientTimeout(total=60)

    for attempt in range(1, retries + 1):
        try:
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(BASE_URL, json=payload, headers=COMMON_HEADERS) as resp:
                    if resp.status == 429:
                        logging.warning(f"[{attempt}/{retries}] 429 Too Many Requests. –ü–∞—É–∑–∞ {delay}s.")
                        await asyncio.sleep(delay)
                        delay *= 2
                        continue

                    if 500 <= resp.status < 600:
                        body = await resp.text()
                        logging.warning(f"[{attempt}/{retries}] –°–µ—Ä–≤–µ—Ä OpenRouter {resp.status}: {body[:300]}")
                        await asyncio.sleep(delay)
                        delay *= 2
                        continue

                    resp.raise_for_status()
                    data = await resp.json(content_type=None)

                    reply = _parse_openrouter_response(data) if data else None
                    if not reply:
                        err_msg = None
                        if isinstance(data, dict):
                            err_msg = (data.get("error") or {}).get("message")
                        if err_msg:
                            logging.warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞: {err_msg}")
                        else:
                            logging.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter –±–µ–∑ –æ—à–∏–±–∫–∏.")
                        reply = "‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–ª—á–∏—Ç."

                    append_user_memory(user_id, user_input, reply)
                    logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return reply

        except asyncio.TimeoutError:
            logging.error(f"[{attempt}/{retries}] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å OpenRouter")
        except aiohttp.ClientError as e:
            logging.warning(f"[{attempt}/{retries}] –°–µ—Ç–µ–≤–æ–π —Å–±–æ–π: {e}. –ü–∞—É–∑–∞ {delay}s.")
        except Exception as e:
            logging.exception(f"[{attempt}/{retries}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–∞—É–∑–∞ {delay}s.")

        await asyncio.sleep(delay)
        delay *= 2

    return "‚ö†Ô∏è –†–∞ —É—Å—Ç–∞–ª, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥. –î–∞–≤–∞–π —á—É—Ç—å –ø–æ–∑–∂–µ, –±—Ä–∞—Ç."
