import os
import asyncio
import logging
import datetime
from gpt_module import safe_ask_openrouter as ask_openrouter
from self_reflection import self_reflect_and_update
from github_commit import create_commit_push

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

class AgentCore:
    def __init__(self):
        self.user_id = "core_agent"
        self.memory_path = "memory/"
        os.makedirs(self.memory_path, exist_ok=True)

    async def ask(self, message):
        """–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenRouter —Å fallback"""
        messages = [{"role": "user", "content": message}]
        logging.info(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GPT: {message[:50]}...")
        try:
            answer = await ask_openrouter(self.user_id, messages)
            logging.info(f"üí° –û—Ç–≤–µ—Ç GPT –ø–æ–ª—É—á–µ–Ω: {answer[:50]}...")
            return answer
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ GPT: {e}")
            return f"–û—à–∏–±–∫–∞ GPT: {e}"

    async def self_update(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞"""
        logging.info("üß† –ó–∞–ø—É—Å–∫ self-reflection...")
        await self_reflect_and_update()

    def create_pr_for_files(self, files_dict, msg="Auto-update by Ra"):
        """–ö–æ–º–º–∏—Ç –∏ PR –Ω–∞ GitHub"""
        branch_name = f"auto-update-{os.getpid()}"
        pr = create_commit_push(branch_name, files_dict, msg)
        logging.info(f"‚úÖ PR —Å–æ–∑–¥–∞–Ω: {pr['html_url']}")
        return pr

    async def run(self):
        logging.info("üöÄ AgentCore —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
        # –ü—Ä–∏–º–µ—Ä: –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
        answer = await self.ask("–ü—Ä–∏–≤–µ—Ç, –†–∞! –ö–∞–∫ —Å–∞–º?")
        logging.info(f"–û—Ç–≤–µ—Ç GPT: {answer}")

        # –°–∞–º–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
        await self.self_update()
        logging.info("‚ú® AgentCore –∑–∞–≤–µ—Ä—à–∏–ª —Ü–∏–∫–ª.")

if __name__ == "__main__":
    core = AgentCore()
    asyncio.run(core.run())
