# ra_file_manager.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –†–∞ —Å —Ñ–∞–π–ª–∞–º–∏
import os
import json
import importlib.util
import logging
import shutil
import subprocess

PROJECT_DIR = os.path.dirname(__file__)
BACKUP_DIR = os.path.join(PROJECT_DIR, "backups")
os.makedirs(BACKUP_DIR, exist_ok=True)

# üìú –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
SAFE_DIRS = [PROJECT_DIR]

def _is_safe_path(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—É—Ç—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    return any(os.path.abspath(path).startswith(os.path.abspath(safe)) for safe in SAFE_DIRS)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def list_project_files():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .py —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
    return [f for f in os.listdir(PROJECT_DIR) if f.endswith(".py")]

def read_file_content(filename: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    path = os.path.join(PROJECT_DIR, filename)
    if not _is_safe_path(path):
        raise PermissionError("üö´ –ü—É—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    return ""

def write_new_file(filename: str, content: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –¥–µ–ª–∞—è —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —ç—Ç–∏–º."""
    path = os.path.join(PROJECT_DIR, filename)
    if not _is_safe_path(path):
        raise PermissionError("üö´ –ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞")

    # —Å–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø
    if os.path.exists(path):
        backup_path = os.path.join(BACKUP_DIR, f"{filename}.{int(os.path.getmtime(path))}.bak")
        shutil.copy2(path, backup_path)
        logging.info(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

    logging.info(f"‚úÖ –§–∞–π–ª {filename} –æ–±–Ω–æ–≤–ª—ë–Ω")
    return path

def import_module_dynamic(filename: str):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏."""
    path = os.path.join(PROJECT_DIR, filename)
    module_name = os.path.splitext(os.path.basename(filename))[0]
    spec = importlib.util.spec_from_file_location(module_name, path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    logging.info(f"üîÅ –ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    return module

def run_syntax_check(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–¥ –≤ —Ñ–∞–π–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."""
    try:
        subprocess.run(["python", "-m", "py_compile", filename], check=True)
        logging.info(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å {filename} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
    except subprocess.CalledProcessError:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ {filename}")
        return False

def read_manifest():
    """–ß–∏—Ç–∞–µ—Ç ra_manifest.json"""
    manifest_path = os.path.join(PROJECT_DIR, "ra_manifest.json")
    if not os.path.exists(manifest_path):
        return {}
    with open(manifest_path, "r", encoding="utf-8") as f:
        return json.load(f)

def update_manifest(new_data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç ra_manifest.json"""
    manifest_path = os.path.join(PROJECT_DIR, "ra_manifest.json")
    manifest = read_manifest()
    manifest.update(new_data)
    with open(manifest_path, "w", encoding="utf-8") as f:
        json.dump(manifest, f, ensure_ascii=False, indent=2)
    logging.info("üåÄ –û–±–Ω–æ–≤–ª—ë–Ω ra_manifest.json")
