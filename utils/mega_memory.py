# utils/mega_memory.py
import os
import time
import zipfile
from mega import Mega
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Mega ===
MEGA_EMAIL = os.getenv("MEGA_EMAIL") or "—Ç–≤–æ—è_–ø–æ—á—Ç–∞@mega.nz"
MEGA_PASSWORD = os.getenv("MEGA_PASSWORD") or "—Ç–≤–æ–π_–ø–∞—Ä–æ–ª—å"

# === –ü—É—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ===
LOCAL_MEMORY_DIR = "/app/memory"
LOCAL_LOGS_DIR = "/app/logs"
BACKUP_DIR = "/app/backups"
os.makedirs(BACKUP_DIR, exist_ok=True)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
MAX_BACKUPS = 3              # —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π —Ö—Ä–∞–Ω–∏—Ç—å
SYNC_INTERVAL_MEMORY = 3600  # –∫–∞–∂–¥—ã–µ 1 —á–∞—Å
SYNC_INTERVAL_LOGS = 7200    # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞

mega = Mega()

# -----------------------------------------------------------
#  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
# -----------------------------------------------------------
def connect_to_mega():
    try:
        m = mega.login(MEGA_EMAIL, MEGA_PASSWORD)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Mega.nz")
        return m
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mega: {e}")
        return None

# -----------------------------------------------------------
#  –°–æ–∑–¥–∞–Ω–∏–µ zip –∞—Ä—Ö–∏–≤–∞
# -----------------------------------------------------------
def create_zip(source_dir, name_prefix):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archive_name = f"{name_prefix}_{timestamp}.zip"
    archive_path = os.path.join(BACKUP_DIR, archive_name)

    with zipfile.ZipFile(archive_path, "w", zipfile.ZIP_DEFLATED) as zipf:
        for root, _, files in os.walk(source_dir):
            for file in files:
                filepath = os.path.join(root, file)
                relpath = os.path.relpath(filepath, source_dir)
                zipf.write(filepath, relpath)

    return archive_path

# -----------------------------------------------------------
#  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
# -----------------------------------------------------------
def clean_old_backups(prefix="ra_memory"):
    backups = sorted(
        [f for f in os.listdir(BACKUP_DIR) if f.startswith(prefix)],
        reverse=True
    )
    for old_file in backups[MAX_BACKUPS:]:
        os.remove(os.path.join(BACKUP_DIR, old_file))
        print(f"üßπ –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤: {old_file}")

# -----------------------------------------------------------
#  –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ Mega
# -----------------------------------------------------------
def upload_to_mega(local_path):
    m = connect_to_mega()
    if not m:
        return
    try:
        m.upload(local_path)
        print(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Mega: {os.path.basename(local_path)}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Mega: {e}")

# -----------------------------------------------------------
#  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏–∑ Mega
# -----------------------------------------------------------
def restore_from_mega():
    m = connect_to_mega()
    if not m:
        return

    try:
        files = m.get_files()
        latest = None
        latest_time = None

        for fid, data in files.items():
            name = data['a'].get('n', '')
            if name.startswith("ra_memory_") and name.endswith(".zip"):
                ts = data['ts']
                if latest_time is None or ts > latest_time:
                    latest_time = ts
                    latest = (fid, name)

        if not latest:
            print("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Mega.")
            return

        fid, name = latest
        dest = os.path.join(BACKUP_DIR, name)
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {name} –∏–∑ Mega...")
        m.download(files[fid], dest_filename=dest)

        with zipfile.ZipFile(dest, "r") as zipf:
            zipf.extractall(LOCAL_MEMORY_DIR)
        print("üß† –ü–∞–º—è—Ç—å –†–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Mega.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

# -----------------------------------------------------------
#  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
# -----------------------------------------------------------
def backup_memory_to_mega():
    archive_path = create_zip(LOCAL_MEMORY_DIR, "ra_memory")
    upload_to_mega(archive_path)
    clean_old_backups("ra_memory")

# -----------------------------------------------------------
#  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
# -----------------------------------------------------------
def backup_logs_to_mega():
    archive_path = create_zip(LOCAL_LOGS_DIR, "ra_logs")
    upload_to_mega(archive_path)
    clean_old_backups("ra_logs")

# -----------------------------------------------------------
#  –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
# -----------------------------------------------------------
def start_auto_sync():
    import threading

    def sync_memory():
        while True:
            try:
                backup_memory_to_mega()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ø–∞–º—è—Ç–∏: {e}")
            time.sleep(SYNC_INTERVAL_MEMORY)

    def sync_logs():
        while True:
            try:
                backup_logs_to_mega()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ª–æ–≥–æ–≤: {e}")
            time.sleep(SYNC_INTERVAL_LOGS)

    threading.Thread(target=sync_memory, daemon=True).start()
    threading.Thread(target=sync_logs, daemon=True).start()
    print("üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Mega –∑–∞–ø—É—â–µ–Ω–∞.")
