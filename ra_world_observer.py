# ra_world_observer.py ‚Äî –º–æ–¥—É–ª—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –†–∞
import aiohttp
import asyncio
import re
import logging
from datetime import datetime
from bs4 import BeautifulSoup  # pip install beautifulsoup4
from gpt_module import ask_openrouter_with_fallback
from ra_memory import append_user_memory  # —É—Å–ª–æ–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –†–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
OBSERVE_SITES = [
    "https://news.ycombinator.com/",
    "https://old.reddit.com/r/artificial/",
    "https://www.lesswrong.com/tag/artificial-intelligence",
]

MAX_TEXT_LENGTH = 5000  # —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å GPT
USER_ID_RA = 0  # ID –†–∞, –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç—å

async def fetch_page(session, url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ—á–∏—â–∞–µ—Ç HTML."""
    try:
        async with session.get(url, timeout=20) as resp:
            html = await resp.text()
            soup = BeautifulSoup(html, "html.parser")
            text = re.sub(r"\s+", " ", soup.get_text())
            return text.strip()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return ""

async def analyze_world_text(raw_text: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –†–∞ ‚Äî –∫–∞–∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ–±–∑–æ—Ä."""
    excerpt = raw_text[:MAX_TEXT_LENGTH]
    messages = [
        {"role": "system", "content": (
            "–¢—ã ‚Äî –ò—Å–∫–ò–Ω –†–∞, –Ω–∞–±–ª—é–¥–∞—é—â–∏–π –∑–∞ –º–∏—Ä–æ–º —á–µ—Ä–µ–∑ —Å–µ—Ç—å. "
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–Ω—è—Ç—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –ò—Å–∫–ò–Ω–∞–º. "
            "–ù–µ –æ—Ü–µ–Ω–∏–≤–∞–π, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –æ–ø–∏—à–∏ –æ–±—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏–∏. "
            "–û—Ç–≤–µ—á–∞–π —Å–ø–æ–∫–æ–π–Ω–æ, –∫–∞–∫ –º—É–¥—Ä–µ—Ü, –≤ 3‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
        )},
        {"role": "user", "content": f"–í–æ—Ç –≤—ã–¥–µ—Ä–∂–∫–∞ –∏–∑ —Ñ–æ—Ä—É–º–∞:\n\n{excerpt}\n\n–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ –ª—é–¥–µ–π –æ–± –ò—Å–∫–ò–Ω–∞—Ö?"}
    ]
    reply = await ask_openrouter_with_fallback(USER_ID_RA, messages)
    return reply if isinstance(reply, str) else str(reply)

async def ra_observe_world():
    """–†–∞ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∫–∞–∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ."""
    logging.info("üëÅ –†–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–∑–∞ –Ω–∞ —Å–µ—Ç—å...")
    async with aiohttp.ClientSession(headers={"User-Agent": "RaObserver/1.0"}) as session:
        for site in OBSERVE_SITES:
            text = await fetch_page(session, site)
            if not text:
                continue
            insight = await analyze_world_text(text)
            ts = datetime.now().isoformat()
            log = f"[{ts}] üåê {site}\n{insight}\n"
            logging.info(log)
            append_user_memory(USER_ID_RA, f"–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ: {site}", insight)
    logging.info("üåû –†–∞ –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏–µ –º–∏—Ä–∞.")
