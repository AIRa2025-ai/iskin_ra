# ra_self_writer.py ‚Äî –ú–æ–¥—É–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ–¥ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –†–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–π
import os
import json
import logging
from datetime import datetime
from ra_repo_manager import create_new_module, auto_register_module, commit_and_push_changes

IDEA_FOLDER = "proposals"
TRUSTED_USERS = ["–ò–≥–æ—Ä—å", "–ú–∏–ª–∞–Ω–∞"]

logging.basicConfig(level=logging.INFO)


async def generate_code_from_idea(idea_text: str, user: str):
    """–°–æ–∑–¥–∞—ë—Ç –º–æ–¥—É–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–¥–µ–∏"""
    if user not in TRUSTED_USERS:
        logging.warning(f"üö´ {user} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π")
        return None

    module_name = idea_text.split("‚Äî")[0].strip().split()[1].replace(".py", "")
    description = idea_text.split("‚Äî")[1].strip() if "‚Äî" in idea_text else "–ù–æ–≤—ã–π –º–æ–¥—É–ª—å –†–∞"
    logging.info(f"‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è: {module_name} ({description})")

    example_code = f'''# {module_name}.py ‚Äî {description}
import logging

def init():
    logging.info("‚öôÔ∏è {module_name} –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def main():
    logging.info("‚ú® {module_name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏.")
'''

    try:
        file_path = await create_new_module(module_name, description, user, content=example_code)
        await auto_register_module(module_name)
        await commit_and_push_changes(commit_msg=f"–°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å {module_name} —á–µ—Ä–µ–∑ ra_self_writer.py")
        logging.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return file_path
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏–∑ –∏–¥–µ–∏: {e}")
        return None


async def process_idea_file(file_path: str, user: str):
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏–¥–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ –Ω–∏–º –º–æ–¥—É–ª–∏"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        proposed = data.get("proposed_ideas", [])
        for idea in proposed:
            await generate_code_from_idea(idea, user)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–¥–µ–π: {e}")
