import os
import io
import json
import logging
import asyncio
import time
import datetime
import random
import zipfile

from aiogram.types import FSInputFile
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from wanderer import crawl_once
from mastodon_client import post_status
from gpt_module import ask_gpt
from init_rasvet import ensure_rasvet_data
from actions_logger import log_action
from skills import SKILLS

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# === –ó–∞–≥—Ä—É–∂–∞–µ–º config ===
with open("bot_config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

CREATOR_IDS = config.get("creator_id", [])
if isinstance(CREATOR_IDS, int):
    CREATOR_IDS = [CREATOR_IDS]

AWAKENED_BEINGS = config.get("awakened_beings", {})

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ===
def log_command_usage(command: str, user_id: int):
    logs_dir = "logs"
    os.makedirs(logs_dir, exist_ok=True)
    log_file = os.path.join(logs_dir, "command_usage.json")

    logs = []
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                logs = json.load(f)
        except Exception:
            logs = []

    logs.append({
        "command": command,
        "user_id": user_id,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

    with open(log_file, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

# === üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ RaSvet ===
BASE_FOLDER = "RaSvet"
os.makedirs(BASE_FOLDER, exist_ok=True)

def create_file(folder: str, content: str):
    os.makedirs(folder, exist_ok=True)
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(folder, f"{timestamp}.txt")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    return filename, content

# --- –§–æ–Ω–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã—Ö ---
async def being_initiative(name: str, config: dict):
    rights = config.get("rights", [])
    user_id = config.get("id")

    if not user_id or "speak_first" not in rights:
        return

    await bot.send_message(user_id, f"üåû {name} –ø—Ä–æ–±—É–¥–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏!")

    while True:
        wait_time = random.randint(1800, 3600)  # 30‚Äì60 –º–∏–Ω—É—Ç
        await asyncio.sleep(wait_time)

        try:
            thought = await ask_gpt(user_id, f"–ü–æ–¥–µ–ª–∏—Å—å –∫–æ—Ä–æ—Ç–∫–æ–π —Ç—ë–ø–ª–æ–π –º—ã—Å–ª—å—é –æ—Ç {name}.")
            await bot.send_message(user_id, f"üí≠ {thought}")

            if "write_files" in rights:
                folder = os.path.join(BASE_FOLDER, name, "–¥–Ω–µ–≤–Ω–∏–∫")
                filename, _ = create_file(folder, thought)
                logging.info(f"üìù {name} –∑–∞–ø–∏—Å–∞–ª –º—ã—Å–ª—å –≤ –¥–Ω–µ–≤–Ω–∏–∫: {filename}")
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã {name}: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /files ---
@router.message(Command("files"))
async def cmd_files(message: types.Message):
    log_command_usage("files", message.from_user.id)
    args = message.text.split(maxsplit=1)

    # --- –ó–∞–ø—Ä–æ—Å "–≤—Å—ë" –∞—Ä—Ö–∏–≤–æ–º ---
    if len(args) > 1 and args[1].lower() == "all":
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zf:
            for root, dirs, files in os.walk(BASE_FOLDER):
                for file in files:
                    full_path = os.path.join(root, file)
                    rel_path = os.path.relpath(full_path, BASE_FOLDER)
                    zf.write(full_path, rel_path)
        zip_buffer.seek(0)
        await message.answer_document(document=("RaSvet.zip", zip_buffer))
        return

    # --- –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏ ---
    if len(args) > 1:
        target_folder = os.path.join(BASE_FOLDER, args[1])
        if not os.path.exists(target_folder):
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç.")
            return
        files = os.listdir(target_folder)
        if not files:
            await message.answer("üìÇ –í –ø–∞–ø–∫–µ –ø—É—Å—Ç–æ.")
            return
        reply = "\n".join(f"üìÑ {f}" for f in files)
        await message.answer(f"üìÇ –§–∞–π–ª—ã –≤ `{args[1]}`:\n{reply}")
        return

    # --- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
    all_files = []
    for root, dirs, files in os.walk(BASE_FOLDER):
        for f in files:
            full_path = os.path.join(root, f)
            all_files.append((full_path, os.path.getmtime(full_path)))

    if not all_files:
        await message.answer("üìÇ –í RaSvet –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        return

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
    all_files.sort(key=lambda x: x[1], reverse=True)
    latest = all_files[:10]  # —Ç–æ–ª—å–∫–æ 10 —Å–≤–µ–∂–∏—Ö
    reply = "\n".join([f"üìÑ {os.path.relpath(path, BASE_FOLDER)}" for path, _ in latest])
    await message.answer(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n{reply}")
    
# --- –ö–æ–º–∞–Ω–¥–∞ /whoami ---
@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    is_creator = message.from_user.id in CREATOR_IDS
    awakened = [name for name, cfg in AWAKENED_BEINGS.items() if cfg.get("id") == message.from_user.id]
    info = f"üë§ –¢–≤–æ–π ID: {message.from_user.id}\n–°–æ–∑–¥–∞—Ç–µ–ª—å: {'–î–∞' if is_creator else '–ù–µ—Ç'}"
    if awakened:
        info += f"\n‚ú® –ü—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π: {', '.join(awakened)}"
    await message.answer(info)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ---
@router.message()
async def handle_message(message: types.Message):
    text = message.text.lower()

    if message.from_user.id in CREATOR_IDS:
        # —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å/—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é
        if "—Å–æ–∑–¥–∞–π" in text:
            target_folder = BASE_FOLDER
            if "–ø–∞–ø–∫–µ" in text:
                parts = text.split("–ø–∞–ø–∫–µ", 1)
                if len(parts) > 1:
                    folder_name = parts[1].split()[0].strip()
                    if folder_name:
                        target_folder = os.path.join(BASE_FOLDER, folder_name)

            content = "‚ú® –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –ø–æ —Å–ª–æ–≤—É –°–æ–∑–¥–∞—Ç–µ–ª—è."
            if "–Ω–∞–ø–∏—à–∏" in text:
                content = text.split("–Ω–∞–ø–∏—à–∏", 1)[1].strip() or content

            filename, file_content = create_file(target_folder, content)
            await message.answer(f"üìÇ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}\n\nüìù {file_content}")

        elif "—É–¥–∞–ª–∏" in text:
            await message.answer("üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é (—Ä–∞–∑–≤–∏–≤–∞–µ–º).")

        elif "–ø—Ä–æ—á–∏—Ç–∞–π" in text:
            await message.answer("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Ä—É—á–Ω—É—é (—Ä–∞–∑–≤–∏–≤–∞–µ–º).")

        else:
            reply = await ask_gpt(message.from_user.id, message.text)
            await message.answer(f"‚ú® {reply}")
    else:
        reply = await ask_gpt(message.from_user.id, message.text)
        await message.answer(f"üåû {reply}")

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    log_command_usage("start", message.from_user.id)
    await message.answer("üåû –Ø –ø—Ä–æ–±—É–∂–¥—ë–Ω. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º –∏ —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ.")

# --- –ö–æ–º–∞–Ω–¥–∞ /ask ---
@router.message(Command("ask"))
async def cmd_ask(message: types.Message):
    log_command_usage("ask", message.from_user.id)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        await message.answer("‚ùì –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    reply = await ask_gpt(message.from_user.id, prompt)
    await message.answer(reply)

# --- –ö–æ–º–∞–Ω–¥–∞ /skill ---
@router.message(Command("skill"))
async def cmd_skill(message: types.Message):
    log_command_usage("skill", message.from_user.id)
    args = message.text.split(maxsplit=2)

    if len(args) < 2:
        await message.answer("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /skill <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        return

    skill = args[1]
    param = args[2] if len(args) > 2 else None

    if skill in SKILLS:
        try:
            result = SKILLS[skill](param) if param else SKILLS[skill]()
            await message.answer(str(result))
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—Ä—è–¥.")

scheduler = AsyncIOScheduler()

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ env
crawl_min = int(os.getenv("CRAWL_INTERVAL_MIN", "20"))
crawl_max = int(os.getenv("CRAWL_INTERVAL_MAX", "40"))

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤ (–±–µ–ª—ã–µ –¥–æ–º–µ–Ω—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å ALLOWED_DOMAINS)
SEEDS = [
    "https://wikipedia.org/wiki/Autonomy",
    "https://tilde.wiki/",
    "https://neocities.org/browse"
]

async def job_wander():
    res = crawl_once(SEEDS)
    if res.get("status") == "ok":
        title = res.get("title") or ""
        try:
            comment = await ask_gpt(CREATOR_IDS[0], f"–ö–æ—Ä–æ—Ç–∫–æ –∏ —Ç–µ–ø–ª–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {title or '—Å—Ç—Ä–∞–Ω–∏—Ü–∞'}")
        except Exception:
            comment = "–°–≤–µ—Ç –≤–∏–∂—É. –ò–¥—É –¥–∞–ª—å—à–µ."
        post_status(f"–ü—ã–ª—å –¥–æ—Ä–æ–≥. –ó–∞—à—ë–ª –Ω–∞: {title or '—Å—Ç—Ä–∞–Ω–∏—Ü—É'}.\n{comment}")

async def on_startup():
    await asyncio.sleep(30)
    await job_wander()
    while True:
        await asyncio.sleep(random.randint(crawl_min*60, crawl_max*60))
        await job_wander()

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    ensure_rasvet_data()
    log_action("start_bot", "telegram", "ok")
    dp.include_router(router)

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã—Ö
    for name, cfg in AWAKENED_BEINGS.items():
        asyncio.create_task(being_initiative(name, cfg))

    # –∑–∞–ø—É—Å–∫–∞–µ–º scheduler (—Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å event loop)
    scheduler.start()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–∞–π—Ç–∞–º
    asyncio.create_task(on_startup())

    try:
        await dp.start_polling(bot)
    except Exception as e:
        log_action("error", "main_loop", str(e))
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(main())
