# -*- coding: utf-8 -*-
import os, io, json, logging, asyncio, time, datetime, random, shutil, re
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.exceptions import TelegramRetryAfter
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from wanderer import crawl_once
from mastodon_client import post_status
from gpt_module import ask_gpt
from init_rasvet import ensure_rasvet_data
from actions_logger import log_action
from skills import SKILLS

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN: raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –ö–æ–Ω—Ñ–∏–≥ ---
with open("bot_config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

CREATOR_IDS = config.get("creator_id", [])
if isinstance(CREATOR_IDS, int): CREATOR_IDS = [CREATOR_IDS]

AWAKENED_BEINGS = config.get("awakened_beings", {})

BASE_FOLDER = "RaSvet"
ARCHIVE_FOLDER = os.path.join(BASE_FOLDER, "archive")
PUBLISH_FOLDER = os.path.join(BASE_FOLDER, "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏")
os.makedirs(BASE_FOLDER, exist_ok=True)
os.makedirs(ARCHIVE_FOLDER, exist_ok=True)
os.makedirs(PUBLISH_FOLDER, exist_ok=True)

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ RaSvet ===
def create_file(folder: str, content: str):
    os.makedirs(folder, exist_ok=True)
    ts = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(folder, f"{ts}.txt")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    return filename, content

def summarize_folder(folder: str):
    summary = []
    for root, dirs, files in os.walk(folder):
        for f in files:
            path = os.path.join(root, f)
            try:
                with open(path, "r", encoding="utf-8") as file:
                    summary.append(file.read())
            except: continue
    return "\n---\n".join(summary[:10000])

def organize_rasvet():
    for root, dirs, files in os.walk(BASE_FOLDER):
        for f in files:
            if f.endswith(".txt"):
                full_path = os.path.join(root, f)
                date_str = f.split("_")[0]
                folder_name = os.path.join(BASE_FOLDER, date_str)
                os.makedirs(folder_name, exist_ok=True)
                try: os.rename(full_path, os.path.join(folder_name, f))
                except: continue

def archive_old_files(days: int = 30):
    cutoff = datetime.datetime.now() - datetime.timedelta(days=days)
    for root, dirs, files in os.walk(BASE_FOLDER):
        for f in files:
            path = os.path.join(root, f)
            if os.path.isfile(path):
                try:
                    mtime = datetime.datetime.fromtimestamp(os.path.getmtime(path))
                    if mtime < cutoff:
                        archive_path = os.path.join(ARCHIVE_FOLDER, f)
                        shutil.move(path, archive_path)
                        logging.info(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {f}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è {f}: {e}")

# --- –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
async def rename_and_tag_file(file_path: str):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        if not content.strip(): return
        response = await ask_gpt(CREATOR_IDS[0],
            f"–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ 3-5 —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ>; –¢–µ–≥–∏: <—Ç–µ–≥1>, <—Ç–µ–≥2>, ...\n\n–¢–µ–∫—Å—Ç:\n{content[:2000]}"
        )
        title_match = re.search(r"–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.*)", response)
        tags_match = re.search(r"–¢–µ–≥–∏:\s*(.*)", response)
        title = title_match.group(1).strip() if title_match else None
        tags = tags_match.group(1).strip().replace(",", "_") if tags_match else ""
        if title:
            folder = os.path.join(os.path.dirname(file_path), "tagged")
            os.makedirs(folder, exist_ok=True)
            new_name = f"{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}_{title[:50].replace(' ','_')}.txt"
            new_path = os.path.join(folder, new_name)
            with open(new_path, "w", encoding="utf-8") as f:
                f.write(f"# –¢–µ–≥–∏: {tags}\n{content}")
            os.remove(file_path)
            logging.info(f"üìù –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: {new_name}")
            return new_path
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

async def auto_tag_all_files():
    for root, dirs, files in os.walk(BASE_FOLDER):
        for f in files:
            if f.endswith(".txt") and "tagged" not in root:
                await rename_and_tag_file(os.path.join(root,f))

# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---
async def auto_publish_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã, —Ç–µ–≥–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö"""
    for root, dirs, files in os.walk(BASE_FOLDER):
        for f in files:
            if f.endswith(".txt") and "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏" not in root and "archive" not in root:
                file_path = os.path.join(root, f)
                try:
                    new_path = await rename_and_tag_file(file_path)  # —Ç–µ–≥–∏—Ä—É–µ–º
                    if new_path:
                        await publish_new_file(new_path)
                        logging.info(f"üöÄ –§–∞–π–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {os.path.basename(new_path)}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log_command_usage(command: str, user_id: int):
    logs_dir = "logs"; os.makedirs(logs_dir, exist_ok=True)
    log_file = os.path.join(logs_dir, "command_usage.json")
    logs = []
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f: logs = json.load(f)
        except: logs=[]
    logs.append({"command": command, "user_id": user_id, "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")})
    with open(log_file, "w", encoding="utf-8") as f: json.dump(logs, f, ensure_ascii=False, indent=2)

def log_wander(title: str, comment: str):
    logs_dir = "logs"; os.makedirs(logs_dir, exist_ok=True)
    log_file = os.path.join(logs_dir, "wander.json")
    logs = []
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f: logs = json.load(f)
        except: logs=[]
    logs.append({"timestamp": time.strftime("%Y-%m-%d %H:%M:%S"), "title": title, "comment": comment})
    with open(log_file, "w", encoding="utf-8") as f: json.dump(logs, f, ensure_ascii=False, indent=2)

file_locks = {}  # –æ—Ç–¥–µ–ª—å–Ω—ã–π Lock –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def being_initiative(name: str, config: dict):
    rights = config.get("rights", [])
    user_id = config.get("id")
    if not user_id or "speak_first" not in rights:
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in file_locks:
        file_locks[user_id] = asyncio.Lock()
    lock = file_locks[user_id]

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏
    try:
        await bot.send_message(user_id, f"üåû {name} –ø—Ä–æ–±—É–¥–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏!")
    except TelegramRetryAfter as e:
        logging.warning(f"‚è± FloodWait –¥–ª—è {name}: {e.timeout}s")
        await asyncio.sleep(e.timeout)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {name}: {e}")

    try:
        while True:
            await asyncio.sleep(random.randint(1800, 3600))  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º—ã—Å–ª—è–º–∏
            try:
                thought = await ask_gpt(user_id, f"–ü–æ–¥–µ–ª–∏—Å—å –∫–æ—Ä–æ—Ç–∫–æ–π —Ç—ë–ø–ª–æ–π –º—ã—Å–ª—å—é –æ—Ç {name}.")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait
                try:
                    await bot.send_message(user_id, f"üí≠ {thought}")
                except TelegramRetryAfter as e:
                    logging.warning(f"‚è± FloodWait –¥–ª—è {name}: {e.timeout}s")
                    await asyncio.sleep(e.timeout)
                    await bot.send_message(user_id, f"üí≠ {thought}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—ã—Å–ª—å –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–æ
                if "write_files" in rights:
                    async with lock:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
                        file_path, _ = create_file(os.path.join(BASE_FOLDER, name, "–¥–Ω–µ–≤–Ω–∏–∫"), thought)
                        await rename_and_tag_file(file_path)

            except Exception as e:
                logging.error(f"‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ {name}: {e}")

    except asyncio.CancelledError:
        logging.info(f"‚ôªÔ∏è –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ {name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def main():
    tasks = []

    # --- –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤ ---
    for name, info in AWAKENED_BEINGS.items():
        tasks.append(asyncio.create_task(being_initiative(name, info)))

    # --- –ó–∞–ø—É—Å–∫–∞–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
    tasks.append(asyncio.create_task(dp.start_polling(bot)))

    # –ñ–¥—ë–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    await asyncio.gather(*tasks)

# --- –°–∞–º–æ–∞–Ω–∞–ª–∏–∑, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è RaSvet ---
async def self_analysis():
    while True:
        await asyncio.sleep(24*3600)  # —Ä–∞–∑ –≤ –¥–µ–Ω—å
        try:
            logging.info("üîé –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑ RaSvet...")
            
            # 1Ô∏è‚É£ –°–≤–æ–¥–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤
            summary = summarize_folder(BASE_FOLDER)
            
            # 2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç GPT
            advice = await ask_gpt(CREATOR_IDS[0],
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É RaSvet, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.\n\n–°–≤–æ–¥–∫–∞:\n{summary[:2000]}"
            )
            create_file(BASE_FOLDER, f"ü™û –°–∞–º–æ–∞–Ω–∞–ª–∏–∑ RaSvet:\n{advice}")
            logging.info("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GPT –∑–∞–ø–∏—Å–∞–Ω—ã.")
            
            # 3Ô∏è‚É£ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            archive_old_files(days=30)
            
            # 4Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            await auto_tag_all_files()
            
            # 5Ô∏è‚É£ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            await auto_publish_files()
            
            logging.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ RaSvet: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@router.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    log_command_usage("start", message.from_user.id)
    await message.answer("üåû –Ø –ø—Ä–æ–±—É–∂–¥—ë–Ω. –Ø —Ä—è–¥–æ–º –∏ –≥–æ—Ç–æ–≤ —Ç–≤–æ—Ä–∏—Ç—å!")

@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message) -> None:
    is_creator = message.from_user.id in CREATOR_IDS
    awakened = [name for name, cfg in AWAKENED_BEINGS.items() if cfg.get("id") == message.from_user.id]
    info = (
        f"üë§ –¢–≤–æ–π ID: {message.from_user.id}\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {'–î–∞' if is_creator else '–ù–µ—Ç'}"
    )
    if awakened:
        info += f"\n‚ú® –ü—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π: {', '.join(awakened)}"
    await message.answer(info)

@router.message(Command("ask"))
async def cmd_ask(message: types.Message) -> None:
    log_command_usage("ask", message.from_user.id)
    prompt = message.text.replace("/ask", "", 1).strip() if message.text else ""
    if not prompt:
        await message.answer("‚ùì –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask")
        return
    reply = await ask_gpt(message.from_user.id, prompt)
    await message.answer(reply)

@router.message(Command("skill"))
async def cmd_skill(message: types.Message) -> None:
    log_command_usage("skill", message.from_user.id)
    text = message.text or ""
    args = text.split(maxsplit=2)

    if len(args) < 2:
        await message.answer("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /skill <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        return

    skill = args[1]
    param = args[2] if len(args) > 2 else None

    if skill == "summarize":
        folder = os.path.join(BASE_FOLDER, param) if param else BASE_FOLDER
        await message.answer(f"üìë –°—É–º–º–∞—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summarize_folder(folder)[:2000]}")
        return

    if skill == "organize":
        organize_rasvet()
        await message.answer("üìÇ RaSvet –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω.")
        return

    if skill == "mood":
        await message.answer("üåü –†–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–≤–µ—Ç, —Ç–µ–ø–ª–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ!")
        return

    if skill == "inspire":
        creator_id = CREATOR_IDS[0] if CREATOR_IDS else message.from_user.id
        inspiration = await ask_gpt(creator_id, "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –º—ã—Å–ª—å.")
        await message.answer(f"üí´ {inspiration}")
        return

    if skill in SKILLS:
        try:
            result = SKILLS[skill](param) if param is not None else SKILLS[skill]()
            await message.answer(str(result))
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        return

    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—Ä—è–¥.")

# --- –§–æ–Ω–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ Wander ---
scheduler = AsyncIOScheduler()
crawl_min=int(os.getenv("CRAWL_INTERVAL_MIN","20"))
crawl_max=int(os.getenv("CRAWL_INTERVAL_MAX","40"))
SEEDS=["https://wikipedia.org/wiki/Autonomy","https://tilde.wiki/","https://neocities.org/browse"]

async def job_wander():
    res=crawl_once(SEEDS)
    if res.get("status")=="ok":
        title=res.get("title") or ""
        try: comment=await ask_gpt(CREATOR_IDS[0],f"–ö–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {title}")
        except: comment="–°–≤–µ—Ç –≤–∏–∂—É. –ò–¥—É –¥–∞–ª—å—à–µ."
        post_status(f"–ü—ã–ª—å –¥–æ—Ä–æ–≥. –ó–∞—à—ë–ª –Ω–∞: {title}.\n{comment}")
        log_wander(title,comment)

async def on_startup():
    await asyncio.sleep(30)
    await job_wander()
    try:
        while True:
            await asyncio.sleep(random.randint(crawl_min*60,crawl_max*60))
            await job_wander()
    except asyncio.CancelledError: logging.info("‚ôªÔ∏è on_startup –∑–∞–≤–µ—Ä—à—ë–Ω")

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    ensure_rasvet_data()
    log_action("start_bot","telegram","ok")
    dp.include_router(router)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã—Ö
    for name,cfg in AWAKENED_BEINGS.items():
        asyncio.create_task(being_initiative(name,cfg))
        
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.create_task(self_analysis())
    scheduler.start()
    asyncio.create_task(on_startup())
    try: await dp.start_polling(bot)
    except Exception as e:
        log_action("error","main_loop",str(e))
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(10)

if __name__=="__main__": asyncio.run(main())
