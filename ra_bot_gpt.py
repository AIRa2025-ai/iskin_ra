import os
import asyncio
import logging
import json
import time
from typing import List

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message

from memory import append_user_memory, load_user_memory
import requests

# =============================
# –ö–æ–Ω—Ñ–∏–≥ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
# =============================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "deepseek/deepseek-r1-0528:free")
KNOWLEDGE_FOLDER = os.getenv("KNOWLEDGE_FOLDER", "./knowledge")
CREATOR_IDS: List[int] = [
    int(x) for x in os.getenv("CREATOR_IDS", "").split(",") if x.strip()
]

# –°–æ–∑–¥–∞–¥–∏–º –∫–∞—Ç–∞–ª–æ–≥ –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
os.makedirs(KNOWLEDGE_FOLDER, exist_ok=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ stdout (–¥–ª—è Fly.io)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger("ra-bot")

# =============================
# –ü—Ä–æ—Å—Ç–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞ OpenRouter
# =============================
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ü—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ –∏ –ø–æ —Å—É—Ç–∏; –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò."
)

def build_messages(user_id: str, user_text: str) -> list:
    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏
    history = load_user_memory(user_id)[-10:]
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    for pair in history:
        if pair.get("user"):
            messages.append({"role": "user", "content": pair["user"]})
        if pair.get("bot"):
            messages.append({"role": "assistant", "content": pair["bot"]})
    messages.append({"role": "user", "content": user_text})
    return messages


def ask_openrouter(user_id: str, user_text: str) -> str:
    if not OPENROUTER_API_KEY:
        return "‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY. –ü–æ–ø—Ä–æ—Å–∏ —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞ Fly.io."

    payload = {
        "model": OPENROUTER_MODEL,
        "messages": build_messages(user_id, user_text),
        "max_tokens": 500,
    }
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": "RaSvet",
    }

    try:
        r = requests.post(
            OPENROUTER_URL,
            headers=headers,
            json=payload,
            timeout=60,
        )
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]

    except requests.exceptions.HTTPError as e:
        logger.error(f"OpenRouter error: {e}")
        time.sleep(10)
        return "‚ö†Ô∏è –†–∞ –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è –¥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞..."


# =============================
# Aiogram 3.x
# =============================
router = Router()

@router.message(F.text)
async def on_text(message: Message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    if not OPENROUTER_API_KEY:
        await message.answer("–†–∞ —Å–ª—ã—à–∏—Ç: " + text)
        return

    reply = ask_openrouter(user_id, text)
    await message.answer(reply, parse_mode=ParseMode.HTML)

    # –ü–∏—à–µ–º –ø–∞–º—è—Ç—å (–Ω–µ –ø–∞–¥–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫)
    try:
        append_user_memory(user_id, text, reply)
    except Exception as e:
        logger.warning(f"Memory write failed: {e}")


async def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å —Å–µ–∫—Ä–µ—Ç—ã Fly.io –∏–ª–∏ .env")
        # –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –¥–µ–ø–ª–æ–π –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É
        raise SystemExit(1)

    logger.info("üöÄ –†–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)

    # –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –±–æ—Ç –∂–∏–≤
    me = await bot.get_me()
    logger.info(f"üåû –†–∞ –≥–æ—Ç–æ–≤. Username=@{me.username} ID={me.id}")

    await dp.start_polling(bot, allowed_updates=["message"])  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –†–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")")
