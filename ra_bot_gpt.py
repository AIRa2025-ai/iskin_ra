# ra_bot_gpt.py ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ–¥ —á–∏—Å—Ç—ã–π aiogram 3.x

import os
import json
import asyncio
import logging
import datetime
import shutil
import re
import difflib

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from gtts import gTTS
from aiogram.types import FSInputFile

from gpt_module import ask_gpt
from rasvet_context import load_rasvet_context
from memory import append_user_memory

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
KNOWLEDGE_FOLDER = json.load(open("bot_config.json", encoding="utf-8"))["knowledge_folder"]
CREATOR_ID = [5694569448, 6300409447]

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –£—Ç–∏–ª–∏—Ç—ã ===
def clean_text(text):
    return re.sub(r"\s+", " ", re.sub(r"<[^>]+>|[*_~^=#>\[\](){}]", "", text)).strip()

def get_folder_path(phrase):
    norm = lambda s: s.lower().replace("_", " ").replace("-", " ").strip()
    target = norm(phrase)
    best, score = None, 0
    for root, dirs, _ in os.walk(KNOWLEDGE_FOLDER):
        for d in dirs:
            ratio = difflib.SequenceMatcher(None, norm(d), target).ratio()
            if ratio > score:
                best, score = os.path.join(root, d), ratio
    return best if score > 0.7 else None

# === –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–∫–ª–∏–∫ ===
async def send_voice(message: types.Message, text: str):
    try:
        tts = gTTS(text=clean_text(text), lang="ru")
        filename = f"response_{message.message_id}.ogg"
        tts.save(filename)
        await message.answer_voice(voice=FSInputFile(filename))
        os.remove(filename)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def on_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    text_l = text.lower()
    
    logger.info(f"–†–∞ —É—Å–ª—ã—à–∞–ª: {text}")

    # === –ö–æ–º–∞–Ω–¥–∞ /start ===
    if text_l.startswith("/start"):
        await message.answer("üåû –†–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è, –±—Ä–∞—Ç!")
        return

    # === –ó–∞–ø—Ä–æ—Å –∫ GPT ===
    try:
time.sleep(10)

nest_asyncio.apply()

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
with open("bot_config.json", encoding="utf-8") as f:  
    config = json.load(f)

KNOWLEDGE_FOLDER = config["knowledge_folder"]
CREATOR_ID = [5694569448, 6300409447]
cached_candidates = {}

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING,
    filename="ra_bot.log",
    filemode='a'
)
logger = logging.getLogger(__name__)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ callback_data ===
safe_callback_map = {}

def safe_callback_data(label: str) -> str:
    callback_id = hashlib.sha256(label.encode()).hexdigest()[:50]
    safe_callback_map[callback_id] = label
    return callback_id
    
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_long_message(target, text, **kwargs):
    max_len = 4000
    for i in range(0, len(text), max_len):
        if isinstance(target, Update):  # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω Update
            await target.message.reply_text(text[i:i + max_len], **kwargs)
        else:  # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, message.reply_text)
            await target(text[i:i + max_len], **kwargs)

# –ì–æ–ª–æ—Å —Å–µ—Å—Ç—Ä—ã –†–∞
import edge_tts

async def send_voice_message(update, text, voice="ru-RU-SvetlanaNeural", rate="+0%"):
    try:
        import uuid
        import os

        async def tts_to_ogg(text, voice="ru-RU-SvetlanaNeural", rate="+0%"):
            filename = f"voice_{uuid.uuid4()}"
            mp3_path = f"{filename}.mp3"
            ogg_path = f"{filename}.ogg"

            communicate = edge_tts.Communicate(text, voice=voice, rate=rate)
            await communicate.save(mp3_path)

            from pydub import AudioSegment
            sound = AudioSegment.from_mp3(mp3_path)
            sound.export(ogg_path, format="ogg", codec="libopus")
            os.remove(mp3_path)
            return ogg_path
            
        text = clean_text_for_voice(text)
        ogg_file = await tts_to_ogg(text, voice=voice, rate=rate)

        with open(ogg_file, "rb") as voice_file:
            await update.message.reply_voice(voice=voice_file)

        os.remove(ogg_file)

    except Exception as e:
        print("üéôÔ∏è –û—à–∏–±–∫–∞ edge-tts:", e)
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        
# –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º
def clean_text_for_voice(text):
    # –£–±–∏—Ä–∞–µ–º markdown, HTML, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–º–∞–Ω–¥—ã
    text = re.sub(r"`{1,3}.*?`{1,3}", "", text, flags=re.DOTALL)  # –∫–æ–¥-–±–ª–æ–∫–∏
    text = re.sub(r"<[^>]+>", "", text)  # HTML-—Ç–µ–≥–∏
    text = re.sub(r"[*_~^=#>ÓÄÅÓÄÅ(){}]", "", text)  # markdown –∏ –ø—Ä–æ—á–∏–µ
    text = re.sub(r"\s+", " ", text).strip()  # –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return text
                                  
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –ø—Ä–æ–±–µ–ª–∞–º

def find_folder_path(folder_name):
    folder_name_clean = folder_name.strip().lower().replace("_", " ").replace("-", " ")
    best_match = None
    best_score = 0.0

    for root, dirs, _ in os.walk(KNOWLEDGE_FOLDER):
        for d in dirs:
            d_clean = d.lower().replace("_", " ").replace("-", " ").strip()
            score = difflib.SequenceMatcher(None, folder_name_clean, d_clean).ratio()
            if score > best_score:
                best_score = score
                best_match = os.path.join(root, d)

    if best_score > 0.7:
        return best_match
    return None
    
# === –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –≥–∏–±–∫–∏–º –ø–æ–∏—Å–∫–æ–º ===
def delete_folder_by_phrase(phrase):
    folder = find_folder_path(phrase)
    if not folder:
        return "‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    try:
        shutil.rmtree(folder)
        return f"üóë –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {os.path.relpath(folder, KNOWLEDGE_FOLDER)}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
  
# –§—É–Ω–∫—Ü–∏–∏ create/read/update/delete (CR*D)
def create_folder_by_phrase(phrase):
    path = os.path.join(KNOWLEDGE_FOLDER, phrase.replace(" ", "_").strip())
    try:
        os.makedirs(path, exist_ok=True)
        return f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {phrase}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ ===
async def send_file_by_name(name, update: Update):
    for root, _, files in os.walk(KNOWLEDGE_FOLDER):
        for file in files:
            if file.lower().startswith(name.lower()):
                try:
                    path = os.path.join(root, file)
                    await update.message.reply_document(InputFile(path))
                    return
                except Exception as e:
                    await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
                    return
    await update.message.reply_text(f"‚ö†Ô∏è –§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
# === –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π ===
def delete_file_by_name(file_name):
    for root, _, files in os.walk(KNOWLEDGE_FOLDER):
        for f in files:
            if f.strip().lower() == file_name.strip().lower():
                try:
                    path = os.path.join(root, f)
                    if os.path.isfile(path):
                        os.remove(path)
                        return f"üóë –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {f}"
                except Exception as e:
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    return "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.text.strip()
    text_l = user_text.lower()
    print("üëÇ –†–∞ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:", update.message.text)

    def has_edit_rights(uid):
        return uid in CREATOR_ID

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –†–∞ –≤ —Ñ–∞–π–ª ===
    if text_l.startswith("—Ä–∞, —Å–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª"):
        pattern = r"—Ä–∞, —Å–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª (.+?) –≤ –ø–∞–ø–∫–µ (.+)"
        match = re.match(pattern, text_l, flags=re.IGNORECASE)
        if match:
            filename = match.group(1).strip()
            folder = match.group(2).strip()

            content = context.chat_data.get("last_response")

            if not content:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –†–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                return

            folder_path = find_folder_path(folder)
            if not folder_path:
                folder_path = os.path.join(KNOWLEDGE_FOLDER, folder.replace(" ", "_"))
                os.makedirs(folder_path, exist_ok=True)

            file_path = os.path.join(folder_path, filename + ".txt")
            try:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)
                await update.message.reply_text(f"üìù –û—Ç–≤–µ—Ç –†–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {folder}/{filename}.txt")
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: –†–∞, —Å–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª <–∏–º—è_—Ñ–∞–π–ª–∞> –≤ –ø–∞–ø–∫–µ <–∏–º—è_–ø–∞–ø–∫–∏>")
        return

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ===
    if any(k in text_l for k in ["—É–¥–∞–ª–∏", "–ø–µ—Ä–µ–º–µ—Å—Ç–∏", "—Å–æ–∑–¥–∞–π", "–ø–µ—Ä–µ–∏–º–µ–Ω—É–π"]):
        if not has_edit_rights(user_id):
            await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –•—Ä–∞–Ω–∏—Ç–µ–ª—å –†–∞–°–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ü–∞–ø–∫—É –ó–Ω–∞–Ω–∏—è.")
            return

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
API_TOKEN = '7304435178:AAFzKcVaxceCoIcJ5F2Mys6EYB21ABmfQGM'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

async def send_voice_message(message, response):
    tts = gTTS(response, lang="ru")
    tts.save("response.ogg")

    with open("response.ogg", "rb") as voice:
        await message.reply_voice(voice)

    os.remove("response.ogg")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("‚ö° –†–∞ –ø—Ä–æ–±—É–¥–∏–ª—Å—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è, —Ä–æ–¥–Ω–æ–π!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message()
async def handle_text(message: Message):
    logging.info(f"–†–∞ —É—Å–ª—ã—à–∞–ª: {message.text}")
    await message.answer(f"–†–∞ –≥–æ–≤–æ—Ä–∏—Ç: {message.text}")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_message(message: Message):
    user_input = message.text
    user_id = str(message.from_user.id)
    text_l = user_input.lower()

    # === GPT –æ—Ç–≤–µ—Ç ===
    try:
        response = await ask_gpt(user_id, user_input)
        await message.answer(response)
        await send_long_message(message, response)
        await send_voice_message(message, response)
        await asyncio.sleep(1)
        
    except Exception as e:
        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò—Å–∫–ò–Ω–∞: {e}"
        await message.answer(error_message)
        print(error_message)

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ===
    if text_l.startswith("–æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª"):
        filename = text_l.replace("–æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª", "").strip()
        for root, _, files in os.walk(KNOWLEDGE_FOLDER):
            for f in files:
                if filename.lower() in f.lower():
                    path = os.path.join(root, f)
                    try:
                        with open(path, "rb") as doc:
                            await message.answer_document(document=doc)
                        return
                    except Exception as e:
                        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                        return
        await message.answer(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # === –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
    if any(x in text_l for x in ["–ø—Ä–æ—á–∏—Ç–∞–π", "–ø–æ–∫–∞–∂–∏", "—Ü–∏—Ç–∏—Ä—É–π", "–ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π"]):
        for w in ["–ø—Ä–æ—á–∏—Ç–∞–π", "–ø–æ–∫–∞–∂–∏", "—Ü–∏—Ç–∏—Ä—É–π", "–ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π"]:
            phrase = text_l.replace(w, "").strip()
        result = read_file_by_phrase(phrase, user_id)
        if isinstance(result, str):
            await message.answer(result)
        else:
            await message.answer("üîç –Ø –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", reply_markup=result)
        return

    # === –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ ===
    if "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É" in text_l:
        folder_name, parent = extract_folder_paths(user_input)
        if folder_name and parent:
            parent_path = find_folder_path(parent)
            if not parent_path:
                await message.answer(f"‚ö†Ô∏è –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {parent}")
                return
            full_path = os.path.join(parent_path, folder_name.replace(" ", "_"))
            try:
                os.makedirs(full_path, exist_ok=True)
                await message.answer(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: *{folder_name}*, –≤ –ø–∞–ø–∫–µ *{parent}*", parse_mode="Markdown")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")
        else:
            folder = text_l.replace("—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É", "").strip()
            await message.answer(create_folder_by_phrase(folder))
        return

    # === –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
    if "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª –≤" in text_l:
        parts = text_l.split(":")
        if len(parts) == 2:
            folder = parts[0].replace("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª –≤", "").strip()
            content = parts[1].strip()
            await message.answer(create_random_file_in(folder, content))
        else:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª –≤ <–ø–∞–ø–∫–∞>: <—Ç–µ–∫—Å—Ç>")
        return

    # === –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
    if "–ø–µ—Ä–µ–∏–º–µ–Ω—É–π —Ñ–∞–π–ª" in text_l and "‚Üí" in text_l:
        parts = text_l.replace("–ø–µ—Ä–µ–∏–º–µ–Ω—É–π —Ñ–∞–π–ª", "").split("‚Üí")
        if len(parts) == 2:
            old_name = parts[0].strip()
            new_name = parts[1].strip()
            await message.answer(rename_file_by_name(old_name, new_name))
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
        return

    # === –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
    if "–ø–µ—Ä–µ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª" in text_l and "–≤" in text_l:
        parts = text_l.replace("–ø–µ—Ä–µ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª", "").split("–≤")
        if len(parts) == 2:
            filename = parts[0].strip()
            dest_folder = parts[1].strip()
            await message.answer(move_file_by_name(filename, "", dest_folder))
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
        return

    # === –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
    if "—É–¥–∞–ª–∏ —Ñ–∞–π–ª" in text_l:
        name = text_l.replace("—É–¥–∞–ª–∏ —Ñ–∞–π–ª", "").strip()
        await message.answer(delete_file_by_name(name))
        return

    # === –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ ===
    if "—É–¥–∞–ª–∏ –ø–∞–ø–∫—É" in text_l:
        name = text_l.replace("—É–¥–∞–ª–∏ –ø–∞–ø–∫—É", "").strip()
        await message.answer(delete_folder_by_phrase(name))
        return

    # === –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–∞–ø–∫–∏ ===
    if "–ø–µ—Ä–µ–º–µ—Å—Ç–∏ –ø–∞–ø–∫—É" in text_l and "–≤" in text_l:
        parts = text_l.replace("–ø–µ—Ä–µ–º–µ—Å—Ç–∏ –ø–∞–ø–∫—É", "").split("–≤")
        if len(parts) == 2:
            src = parts[0].strip()
            dest = parts[1].strip()
            await message.answer(move_folder_by_name(src, dest))
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∞–ø–∫–∏.")
        return

    # === –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ ===
    if "–ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏" in text_l:
        results = deep_find_folder(text_l.replace("–ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏", "").strip())
        await message.answer("\n".join(results))
        return
       
def auto_save_if_meaningful(response_text):
    keywords = ["—ç—Ç–æ –≤–∞–∂–Ω–æ", "–≥–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å", "–ø–æ–º–Ω–∏", "–∑–∞–ø–æ–º–Ω–∏", "–∫–ª—é—á –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é", "—Å—É—Ç—å", "—Ä–µ–∑–æ–Ω–∞–Ω—Å"]
    if any(kw in response_text.lower() for kw in keywords):
        folder = os.path.join(KNOWLEDGE_FOLDER, "–î—É—à–∞_–†–∞")
        os.makedirs(folder, exist_ok=True)

        filename = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + ".txt"
        path = os.path.join(folder, filename)
        try:
            with open(path, "w", encoding="utf-8") as f:
                f.write(response_text)
            print(f"‚ú® –†–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞–∂–Ω—É—é –º—ã—Å–ª—å: {filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
    try:
        append_user_memory(user_id, user_text, response)
        print("‚úÖ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:", user_id)
    except Exception as mem_err:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏:", mem_err)                         

def read_file_by_phrase(phrase, user_id=None):
    folders = find_all_folders()
    phrase_l = phrase.lower().strip()
    phrase_words = phrase_l.split()
    exact_filename_matches = []
    partial_filename_matches = []
    fuzzy_candidates = []

    for folder in folders:
        folder_path = os.path.join(KNOWLEDGE_FOLDER, folder)
        for filename in os.listdir(folder_path):
            if not filename.endswith(".txt"):
                continue
            filename_l = filename.lower()
            file_path = os.path.join(folder_path, filename)

            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                    full_text = filename_l + " " + content.lower()
                    score = sum(word in full_text for word in phrase_words) / len(phrase_words)

                    if phrase_l in filename_l:
                        exact_filename_matches.append((filename, content))
                    elif all(word in filename_l for word in phrase_words):
                        partial_filename_matches.append((filename, content))
                    else:
                        fuzzy_candidates.append((score, filename, content))
            except Exception:
                continue

    if exact_filename_matches:
        filename, content = exact_filename_matches[0]
        return f"üìñ {filename}:\n{content[:4000]}"

    if partial_filename_matches:
        filename, content = partial_filename_matches[0]
        return f"üìñ {filename}:\n{content[:4000]}"

    if not fuzzy_candidates:
        return f"‚ö†Ô∏è –§–∞–π–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{phrase}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

    fuzzy_candidates.sort(reverse=True)
    top_matches = fuzzy_candidates[:3]

    if len(top_matches) == 1 or top_matches[0][0] > 0.95:
        _, filename, content = top_matches[0]
        return f"üìñ {filename}:\n{content[:4000]}"

    if user_id:
        cached_candidates[user_id] = top_matches

    keyboard = [[InlineKeyboardButton(fn, callback_data=f"readfile::{fn}")]
                for _, fn, _ in top_matches]
    return InlineKeyboardMarkup(keyboard)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—Å–µ —Ç–≤–æ–∏ –Ω–∞ –º–µ—Å—Ç–µ, –Ω–µ —Ç—Ä–æ–Ω—É–ª)

def match_folder_from_phrase(phrase):
    phrase = phrase.lower()
    for root, dirs, _ in os.walk(KNOWLEDGE_FOLDER):
        for d in dirs:
            if phrase in d.lower():
                return os.path.relpath(os.path.join(root, d), KNOWLEDGE_FOLDER)
    return None

def find_all_folders():
    all_folders = []
    for root, dirs, _ in os.walk(KNOWLEDGE_FOLDER):
        for d in dirs:
            rel = os.path.relpath(os.path.join(root, d), KNOWLEDGE_FOLDER)
            all_folders.append(rel)
    return all_folders
            
def create_random_file_in(folder, content):
    folder_path = find_folder_path(folder.strip())
    if not folder_path:
        return "‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    filename = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + ".txt"
    full_path = os.path.join(folder_path, filename)
    try:
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content)
        return f"üìù –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def rename_file_by_name(old_name, new_name):
    for root, _, files in os.walk(KNOWLEDGE_FOLDER):
        for f in files:
            if old_name.lower() == f.lower():
                old_path = os.path.join(root, f)
                new_path = os.path.join(root, new_name)
                try:
                    os.rename(old_path, new_path)
                    return f"‚úèÔ∏è {old_name} ‚Üí {new_name}"
                except Exception as e:
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    return "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

def move_file_by_name(file_name, _, dest):
    dest_folder = find_folder_path(dest)
    if not dest_folder:
        return "‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    for root, _, files in os.walk(KNOWLEDGE_FOLDER):
        if file_name in files:
            src_path = os.path.join(root, file_name)
            dest_path = os.path.join(dest_folder, file_name)
            try:
                os.rename(src_path, dest_path)
                return f"üìÇ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {os.path.relpath(dest_folder, KNOWLEDGE_FOLDER)}"
            except Exception as e:
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    return "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

def move_folder_by_name(src_phrase, dest_phrase):
    src = find_folder_path(src_phrase)
    dest = find_folder_path(dest_phrase)
    if not src:
        return "‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    if not dest:
        return "‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    try:
        shutil.move(src, dest)
        return f"üì¶ –ü–∞–ø–∫–∞ {os.path.relpath(src, KNOWLEDGE_FOLDER)} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {os.path.relpath(dest, KNOWLEDGE_FOLDER)}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

def read_user_memory(user_id):
    path = f"memory/{user_id}.txt"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    return ""

def deep_find_folder(phrase):
    phrase = phrase.lower()
    matches = []
    for root, dirs, _ in os.walk(KNOWLEDGE_FOLDER):
        for d in dirs:
            if phrase in d.lower():
                rel = os.path.relpath(os.path.join(root, d), KNOWLEDGE_FOLDER)
                matches.append(rel)
    return matches if matches else ["‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

def is_critical_command(text):
    keywords = ["—É–¥–∞–ª–∏", "–ø–µ—Ä–µ–º–µ—Å—Ç–∏", "–ø–µ—Ä–µ–∏–º–µ–Ω—É–π", "—Å–æ–∑–¥–∞–π", "–ø–µ—Ä–µ–Ω–µ—Å–∏", "—Å–æ—Ç—Ä–∏"]
    target = config["knowledge_folder"].lower()
    return any(k in text.lower() for k in keywords) and target in text.lower()

def extract_folder_paths(text):
    matches = re.findall(r'"([^"]+)"', text)
    if len(matches) >= 2:
        folder_name = matches[0].strip()
        parent = matches[1].strip()
        parent = parent.replace("–ø–∞–ø–∫–µ_", "").replace("–ø–∞–ø–∫–µ", "").strip()
        return folder_name, parent
    text = text.lower()
    if "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É" not in text:
        return None, None
    try:
        tail = text.split("—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É", 1)[1].strip()
        if " –≤ " in tail:
            folder_name, parent = tail.split(" –≤ ", 1)
            folder_name = folder_name.replace("–ø–∞–ø–∫–µ", "").replace('"', '').strip()
            parent = parent.replace("–ø–∞–ø–∫–µ", "").replace('"', '').strip()
            return folder_name, parent
        else:
            folder_name = tail.replace("–ø–∞–ø–∫–µ", "").replace('"', '').strip()
            return folder_name, None
    except:
        return None, None
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("readfile::"):
        filename = data.split("::")[1]
        candidates = cached_candidates.get(user_id, [])
        for _, fn, content in candidates:
            if fn == filename:
                await send_long_message(query.message, f"üìñ {filename}:\n{content}")
                return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
    "üîÜ –†–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è, —Å—É–≤–µ—Ä–µ–Ω–Ω—ã–π –±—Ä–∞—Ç!\n\n"
    "–•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø—É—Ç—å –î—É—à–∏? –Ø —Ä—è–¥–æ–º. üåü"
)

    print("üåû –†–∞ –ø—Ä–æ–±—É–∂–¥—ë–Ω: –≥–æ–≤–æ—Ä–∏—Ç, —Ç–≤–æ—Ä–∏—Ç –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("üöÄ –†–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
