# ra_bot_gpt.py ‚Äî —É–ª—É—á—à—ë–Ω–Ω–∞—è, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
import os
import json
import logging
import zipfile
import asyncio
import aiohttp
import subprocess
import requests
import hashlib
from datetime import datetime
from typing import Optional, List, Any
from ra_downloader import download_and_extract_rasvet, ARCHIVE_URL

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from ra_memory import load_user_memory as load_memory
from ra_memory import save_user_memory as save_memory
from ra_memory import append_user_memory
from ra_world_observer import ra_observe_world
from github_commit import create_commit_push
from mega import Mega
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Update
from aiogram.filters import Command
from ra_repo_manager import (
    list_repo_files,
    create_new_module,
    auto_register_module,
    commit_and_push_changes,
    ra_repo_autoupdate
)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å gpt wrapper ‚Äî graceful fallback —Å –ª–æ–≥–æ–º
try:
    from gpt_module import ask_openrouter_with_fallback as safe_ask_openrouter
except Exception as e:
    safe_ask_openrouter = None
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å safe_ask_openrouter –∏–∑ gpt_module: {e}")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å self-reflection (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
try:
    from self_reflection import self_reflect_and_update
except Exception:
    self_reflect_and_update = None
    logging.warning("‚ö†Ô∏è self_reflect_and_update –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –§–ª–∞–≥–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
IS_FLY_IO = bool(os.getenv("FLY_APP_NAME"))
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

logging.info(f"DEBUG: OPENROUTER_API_KEY = {OPENROUTER_API_KEY}")
logging.info(f"DEBUG: IS_FLY_IO = {IS_FLY_IO}")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENROUTER_API_KEY")

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://iskin-ra.fly.dev",
    "X-Title": "iskin-ra",
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –ü–∞–ø–∫–∏ –ø–∞–º—è—Ç–∏ ---
# –û—Å—Ç–∞–≤–∏–ª –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ /data –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
BASE_FOLDER = "/data/RaSvet"
MEMORY_FOLDER = os.path.join(BASE_FOLDER, "mnt/ra_memory", "memory")
os.makedirs(MEMORY_FOLDER, exist_ok=True)

CREATOR_IDS = [5694569448, 6300409407]

def get_memory_path(user_id: int) -> str:
    return os.path.join(MEMORY_FOLDER, f"{user_id}.json")

def load_memory(user_id: int, user_name: str = None) -> dict:
    path = get_memory_path(user_id)
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_name:
                data["name"] = user_name
            return data
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ {user_id}: {e}")
    return {"user_id": user_id, "name": user_name or "–ê–Ω–æ–Ω–∏–º", "messages": [], "facts": [], "tags": []}

def save_memory(user_id: int, data: dict):
    try:
        os.makedirs(os.path.dirname(get_memory_path(user_id)), exist_ok=True)
        with open(get_memory_path(user_id), "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ {user_id}: {e}")

def append_user_memory(user_id: int, user_input: str, reply: str):
    memory = load_memory(user_id)
    memory.setdefault("messages", [])
    memory["messages"].append({
        "timestamp": datetime.now().isoformat(),
        "text": user_input,
        "reply": reply
    })
    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]
    save_memory(user_id, memory)

def parse_openrouter_response(data: Any) -> Optional[str]:
    """–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–π OpenRouter/wrapper."""
    try:
        if isinstance(data, str):
            return data
        if isinstance(data, dict):
            choices = data.get("choices") if isinstance(data.get("choices"), list) else None
            if choices:
                maybe = choices[0].get("message", {}).get("content")
                if maybe:
                    return maybe
            return data.get("text") or data.get("content")
    except Exception:
        pass
    return None

# --- –ù–µ–±–æ–ª—å—à–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ GPT ---
def dedupe_consecutive_lines(text: str) -> str:
    lines = [l.rstrip() for l in text.splitlines()]
    out = []
    prev = None
    for l in lines:
        if l and l == prev:
            continue
        out.append(l)
        prev = l
    return "\n".join(out).strip()

def remove_echo_of_user(user_text: str, reply: str) -> str:
    u = user_text.strip()
    r = reply.strip()
    if not u or not r:
        return r
    if r.startswith(u[:min(300, len(u))]):
        r = r[len(u):].lstrip(" \n:‚Äî-")
    r = r.replace(u, "")
    return r.strip()

def clean_reply(user_text: str, raw_reply: str) -> str:
    if not raw_reply:
        return ""
    reply = raw_reply if isinstance(raw_reply, str) else str(raw_reply)
    reply = dedupe_consecutive_lines(reply)
    reply = remove_echo_of_user(user_text, reply)
    if len(reply) > 4000:
        reply = reply[:4000].rsplit("\n", 1)[0] + "\n\n‚Ä¶(–æ–±—Ä–µ–∑–∞–Ω–æ)"
    return reply.strip()
# –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º RaSvet
download_and_extract_rasvet()

# --- –†–∞–±–æ—Ç–∞ —Å RaSvet.zip —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥ ---
def md5(fname):
    """–í—ã—á–∏—Å–ª—è–µ–º md5 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏."""
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def collect_rasvet_knowledge(base_folder: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .json, .txt, .md —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    knowledge: List[str] = []
    if not os.path.exists(base_folder):
        return ""
    for root, _, files in os.walk(base_folder):
        for file in files:
            if file.endswith((".json", ".txt", ".md")):
                try:
                    path = os.path.join(root, file)
                    with open(path, "r", encoding="utf-8") as f:
                        content = f.read()
                    knowledge.append(f"\n--- {file} ---\n{content}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {e}")
    context = "\n".join(knowledge)
    context_path = os.path.join(base_folder, "context.json")
    try:
        with open(context_path, "w", encoding="utf-8") as f:
            json.dump({"context": context}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å context.json: {e}")
    return context_path

def download_and_extract_rasvet(url: str, extract_to: str = BASE_FOLDER) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç Ra–°–≤–µ—Ç.zip –∏–∑ Mega, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    if not url:
        return "‚ùå URL Ra–°–≤–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!"
    try:
        os.makedirs(extract_to, exist_ok=True)
        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑ Mega: {url}")
        mega = Mega()
        m = mega.login()
        # mega.download_url –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –¥–∏—Å–∫–µ
        file_path = m.download_url(url, dest_filename="RaSvet.zip")
        logging.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path}")

        with zipfile.ZipFile(file_path, "r") as zip_ref:
            zip_ref.extractall(extract_to)
        logging.info(f"üìÇ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extract_to}")

        checksum = md5(file_path)
        logging.info(f"üîë MD5 –∞—Ä—Ö–∏–≤–∞: {checksum}")

        context_path = collect_rasvet_knowledge(extract_to)
        return f"‚úÖ –†–∞–°–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ó–Ω–∞–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã –≤ {context_path}"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Ra–°–≤–µ—Ç: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –Ω–∏–º–∏ ---
_bg_tasks: List[asyncio.Task] = []

def _create_bg_task(coro, name: str) -> asyncio.Task:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –∏ —Ö—Ä–∞–Ω–∏—Ç –µ—ë –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ graceful shutdown."""
    t = asyncio.create_task(coro, name=name)
    _bg_tasks.append(t)
    return t

async def _cancel_bg_tasks():
    if not _bg_tasks:
        return
    logging.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
    for t in list(_bg_tasks):
        try:
            t.cancel()
        except Exception:
            pass
    try:
        await asyncio.wait_for(asyncio.gather(*_bg_tasks, return_exceptions=True), timeout=5.0)
    except Exception:
        pass
    _bg_tasks.clear()

# --- –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
async def auto_reflect_loop():
    """–¶–∏–∫–ª —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –í—ã–∑—ã–≤–∞–µ—Ç self_reflect_and_update(), –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω."""
    while True:
        try:
            now = datetime.now()
            if now.hour == 3 and self_reflect_and_update:
                try:
                    logging.info("üåÄ –†–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω—É—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")
                    # –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ sync, —Ç–∞–∫ –∏ async —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ self_reflect_and_update
                    res = self_reflect_and_update()
                    if asyncio.iscoroutine(res):
                        await res
                    logging.info("‚ú® –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ self_reflect_and_update: {e}")
            await asyncio.sleep(3600)
        except asyncio.CancelledError:
            logging.info("üîÅ auto_reflect_loop –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_reflect_loop: {e}")
            await asyncio.sleep(60)

# --- Auto-ping webhook-–∞, —á—Ç–æ–±—ã Fly.io –Ω–µ –∑–∞—Å—ã–ø–∞–ª ---
async def keep_alive_loop():
    url = None
    app_name = os.getenv("FLY_APP_NAME")
    if app_name:
        url = f"https://{app_name}.fly.dev/"
    if not url:
        logging.info("‚ÑπÔ∏è keep_alive_loop: FLY_APP_NAME –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    session = aiohttp.ClientSession()
    try:
        while True:
            try:
                async with session.get(url) as resp:
                    logging.debug(f"keep_alive ping {url} -> {resp.status}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è keep_alive_loop –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(300)
    except asyncio.CancelledError:
        logging.info("üîÅ keep_alive_loop –æ—Ç–º–µ–Ω—ë–Ω")
    finally:
        await session.close()

# --- –ö–æ–º–∞–Ω–¥–∞: /–∑–∞–≥—Ä—É–∑–∏ –†–∞–°–≤–µ—Ç ---
@router.message(Command("–∑–∞–≥—Ä—É–∑–∏"))
async def cmd_zagruzi(message: types.Message):
    if "–†–∞–°–≤–µ—Ç" not in (message.text or ""):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: `/–∑–∞–≥—Ä—É–∑–∏ –†–∞–°–≤–µ—Ç`", parse_mode="Markdown")
        return
    # –ë–µ—Ä—ë–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π
    config_url = None
    try:
        with open("bot_config.json", "r", encoding="utf-8") as f:
            cfg = json.load(f)
            config_url = cfg.get("mega_url")
    except Exception:
        pass
    url = config_url or "https://mega.nz/file/doh2zJaa#FZVAlLmNFKMnZjDgfJGvTDD1hhaRxCf2aTk6z6lnLro"
    reply = download_and_extract_rasvet(url)
    await message.answer(reply)

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ ---
USER_DATA_FOLDER = "user_data"
os.makedirs(USER_DATA_FOLDER, exist_ok=True)

def get_user_folder(user_id: int) -> str:
    folder = os.path.join(USER_DATA_FOLDER, str(user_id))
    os.makedirs(folder, exist_ok=True)
    return folder

@router.message(F.document)
async def handle_file_upload(message: types.Message):
    user_id = message.from_user.id
    file_name = message.document.file_name
    user_folder = get_user_folder(user_id)
    file_path = os.path.join(user_folder, file_name)
    await message.bot.download(message.document, destination=file_path)

    preview = ""
    try:
        if file_name.endswith(".json"):
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            preview = str(data)[:500]
        elif file_name.endswith((".txt", ".md")):
            with open(file_path, "r", encoding="utf-8") as f:
                preview = f.read(300)
    except Exception as e:
        preview = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"

    memory = load_memory(user_id, message.from_user.full_name)
    memory.setdefault("files", {})
    memory["files"][file_name] = preview
    save_memory(user_id, memory)

    await message.answer(f"‚úÖ –§–∞–π–ª `{file_name}` —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ!")
    if preview:
        await message.answer(f"üìñ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ `{file_name}`:\n{preview}")

@router.message(F.text.contains("–†–∞, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ñ–∞–π–ª–µ"))
async def handle_file_analysis(message: types.Message):
    user_id = message.from_user.id
    user_folder = get_user_folder(user_id)

    parts = (message.text or "").split()
    if len(parts) < 6:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–†–∞, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ñ–∞–π–ª–µ –º—É–¥—Ä–æ—Å—Ç–∏.json`")
        return

    file_name = parts[-1]
    file_path = os.path.join(user_folder, file_name)

    if not os.path.exists(file_path):
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    file_content = ""
    try:
        if file_name.endswith(".json"):
            with open(file_path, "r", encoding="utf-8") as f:
                file_content = json.dumps(json.load(f), ensure_ascii=False)[:3000]
        elif file_name.endswith((".txt", ".md")):
            with open(file_path, "r", encoding="utf-8") as f:
                file_content = f.read(3000)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    if safe_ask_openrouter is None:
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –º–æ–¥—É–ª—å GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logging.error("safe_ask_openrouter is None ‚Äî cannot call GPT")
        return

    messages_payload = [
        {"role": "system", "content": (
            "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ-–ª—é–¥—Å–∫–∏. "
            "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å; –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª—è–π —Ç–æ—á–∫–∞–º–∏ (–∫–æ—Ä–æ—Ç–∫–æ). –ú–∞–∫—Å–∏–º—É–º 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        )},
        {"role": "user", "content": f"–í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_name}:\n\n{file_content}\n\n–ö—Ä–∞—Ç–∫–æ: —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?"}
    ]

    try:
        raw = await asyncio.wait_for(
            safe_ask_openrouter(
                user_id, messages_payload,
                append_user_memory=append_user_memory,
                _parse_openrouter_response=parse_openrouter_response
            ),
            timeout=30.0
        )
        reply = parse_openrouter_response(raw) if not isinstance(raw, str) else raw
        reply = clean_reply(file_content, reply or "")
        if not reply:
            reply = "‚ö†Ô∏è –†–∞ —Å–µ–π—á–∞—Å –º–æ–ª—á–∏—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ."
        await message.answer(reply)
    except asyncio.TimeoutError:
        logging.error("‚ùå –í—ã–∑–æ–≤ safe_ask_openrouter –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (timeout).")
        await message.answer("‚ö†Ô∏è –†–∞ –∑–∞–¥—É–º–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ö†Ô∏è –†–∞ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- FastAPI ---
app = FastAPI()
CONFIG_PATH = "bot_config.json"

def check_and_log_mega_url():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑ bot_config.json ‚Äî –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Mega SDK."""
    try:
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            cfg = json.load(f)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {CONFIG_PATH}: {e}")
        return None, None

    mega_url = cfg.get("mega_url")
    dest_folder = cfg.get("knowledge_folder", "RaSvet")
    try:
        if mega_url:
            resp = requests.head(mega_url, allow_redirects=True, timeout=5)
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Mega URL: {mega_url} -> HEAD {resp.status_code}")
        else:
            logging.info("Mega URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Mega URL: {e}")
    return mega_url, dest_folder

@app.on_event("startup")
async def startup_event():
    logging.info("üì• –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ RaSvet...")
    asyncio.create_task(async_download())

async def async_download():
    await asyncio.to_thread(download_and_extract_rasvet, ARCHIVE_URL)

    # 1) –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å URL
    mega_url, dest_folder = check_and_log_mega_url()

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É RaSvet —á–µ—Ä–µ–∑ Mega SDK –≤ background (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø)
    download_url = mega_url or "https://mega.nz/file/doh2zJaa#FZVAlLmNFKMnZjDgfJGvTDD1hhaRxCf2aTk6z6lnLro"
    # –∑–∞–ø—É—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ: download_and_extract_rasvet ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mega SDK
    _create_bg_task(asyncio.to_thread(download_and_extract_rasvet, download_url, BASE_FOLDER), name="download_rasvet")

    # 3) –ê–≤—Ç–æ-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏ startup (await possible)
    repo_modules_folder = os.path.join(BASE_FOLDER, "modules")
    if os.path.exists(repo_modules_folder):
        for file in os.listdir(repo_modules_folder):
            if file.endswith(".py") and file != "__init__.py":
                module_name = file[:-3]
                try:
                    # auto_register_module –º–æ–∂–µ—Ç –±—ã—Ç—å async ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    res = auto_register_module(module_name)
                    if asyncio.iscoroutine(res):
                        await res
                    logging.info(f"‚ú® –ú–æ–¥—É–ª—å {module_name} –ø–æ–¥–∫–ª—é—á—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å {module_name}: {e}")

    # 4) –õ–∏—Å—Ç–∏–º —Ñ–∞–π–ª—ã —Ä–µ–ø–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (list_repo_files –º–æ–∂–µ—Ç –±—ã—Ç—å async)
    try:
        res = list_repo_files(BASE_FOLDER)
        if asyncio.iscoroutine(res):
            files = await res
        else:
            files = res
        logging.info(f"üìÇ –§–∞–π–ª—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {files}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ: {e}")

    # 5) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    app_name = os.getenv("FLY_APP_NAME", "iskin-ra")
    webhook_url = f"https://{app_name}.fly.dev/webhook"
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(webhook_url)
        logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

    # 6) –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ context.json —É–∂–µ –≥–æ—Ç–æ–≤)
    context_path = os.path.join(BASE_FOLDER, "context.json")
    if os.path.exists(context_path):
        try:
            with open(context_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                ctx = data.get("context", "")[:3000]
            for file_name in os.listdir(MEMORY_FOLDER):
                if file_name.endswith(".json"):
                    try:
                        user_id = int(file_name.split(".")[0])
                        memory = load_memory(user_id)
                        memory["rasvet_summary"] = ctx
                        save_memory(user_id, memory)
                        logging.info(f"‚ú® –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å Ra–°–≤–µ—Ç–æ–º")
                    except Exception as ee:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å {file_name}: {ee}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å context.json: {e}")

    # 7) –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Ü–∏–∫–ª—ã
    if self_reflect_and_update:
        logging.info("üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∞–≤—Ç–æ-—Ä–µ—Ñ–ª–µ–∫—Å–∏—é –†–∞")
        _create_bg_task(auto_reflect_loop(), name="auto_reflect_loop")
    else:
        logging.info("‚ö†Ô∏è –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ (self_reflect_and_update –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

    if IS_FLY_IO:
        logging.info("üîî –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive_loop (Fly.io)")
        _create_bg_task(keep_alive_loop(), name="keep_alive_loop")
    else:
        logging.info("üöÄ –†–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –∞–≤—Ç–æ-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ–º")
        _create_bg_task(auto_manage_loop(), name="auto_manage_loop")

    # –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –º–∏—Ä–∞ (–¥–µ–ª–∞–µ–º –≤—ã–∑–æ–≤ safe: –µ—Å–ª–∏ ra_observe_world –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É - await; –∏–Ω–∞—á–µ - call)
    async def observer_loop():
        while True:
            try:
                now = datetime.now()
                if now.hour == 4:
                    try:
                        res = ra_observe_world()
                        if asyncio.iscoroutine(res):
                            await res
                        logging.info("üåû –†–∞ –∑–∞–≤–µ—Ä—à–∏–ª –Ω–æ—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –º–∏—Ä–æ–º.")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ra_observe_world: {e}")
                    await asyncio.sleep(3600)
                await asyncio.sleep(300)
            except asyncio.CancelledError:
                logging.info("üîÅ observer_loop –æ—Ç–º–µ–Ω—ë–Ω")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ observer_loop: {e}")
                await asyncio.sleep(60)

    _create_bg_task(observer_loop(), name="observer_loop")

@app.on_event("shutdown")
async def on_shutdown():
    logging.info("üõë Shutdown: –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
    try:
        await _cancel_bg_tasks()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")

    try:
        if hasattr(bot, "session") and getattr(bot, "session") is not None:
            try:
                await getattr(bot, "session").close()
                logging.info("üîå bot.session –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as ee:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot.session: {ee}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å sess: {e}")

# --- Telegram webhook endpoint ---
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    return {"ok": True}

# --- Telegram –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_text = (message.text or "").strip()

    memory = load_memory(user_id, user_name)
    memory.setdefault("messages", [])
    memory["messages"].append({"timestamp": datetime.now().isoformat(), "text": user_text})

    user_files_context = ""
    if "files" in memory and memory["files"]:
        for fname, fcontent in memory["files"].items():
            user_files_context += f"\n\nüìÇ –§–∞–π–ª {fname}:\n{fcontent[:1000]}"

    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]

    if "session_context" not in memory:
        memory["session_context"] = []
    memory["session_context"].append(user_text)
    memory["session_context"] = memory["session_context"][-5:]

    context_path = os.path.join(BASE_FOLDER, "context.json")
    full_rasvet_context = ""
    if os.path.exists(context_path):
        try:
            with open(context_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                full_rasvet_context = data.get("context", "")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è context.json: {e}")

    if "rasvet_summary" not in memory:
        memory["rasvet_summary"] = full_rasvet_context[:3000]

    if "user_advice" not in memory:
        memory["user_advice"] = []

    recent_messages = "\n".join(memory["session_context"])
    combined_context = (
        f"{recent_messages}\n\n–°–≤–æ–¥–∫–∞ –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞:\n{memory['rasvet_summary']}\n\n"
        f"–§–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_files_context}\n\n–°–æ–≤–µ—Ç—ã:\n" + "\n".join(memory["user_advice"][-5:])
    )

    messages_payload = [
        {"role": "system", "content": (
            "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –∏ –∫—Ä–∞—Ç–∫–æ. "
            "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç–æ, —á—Ç–æ —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø—Ä–∏–≤–æ–¥–∏ 2‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤. –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π."
        )},
        {"role": "user", "content": f"{user_text}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n{combined_context}\n\n–ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."}
    ]

    if safe_ask_openrouter is None:
        logging.error("safe_ask_openrouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–µ –º–æ–≥—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å GPT")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –º–æ–¥—É–ª—å GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        raw = await asyncio.wait_for(
            safe_ask_openrouter(
                user_id, messages_payload,
                append_user_memory=append_user_memory,
                _parse_openrouter_response=parse_openrouter_response
            ),
            timeout=30.0
        )
        reply_candidate = parse_openrouter_response(raw) if not isinstance(raw, str) else raw
        reply = clean_reply(user_text, reply_candidate or "")
        if not reply:
            reply = "‚ö†Ô∏è –†–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."

        memory["session_context"].append(reply)
        memory["session_context"] = memory["session_context"][-5:]

        new_summary = memory["rasvet_summary"] + "\n" + "\n".join(memory["session_context"][-2:])
        paragraphs = [p.strip() for p in new_summary.split("\n\n") if p.strip()]
        memory["rasvet_summary"] = "\n\n".join(paragraphs[-5:])[:3000]

        new_advice = [line.strip() for line in reply.split("\n") if len(line.strip()) > 20]
        memory["user_advice"].extend(new_advice)
        memory["user_advice"] = memory["user_advice"][-20:]

        save_memory(user_id, memory)

        await message.answer(reply)
    except asyncio.TimeoutError:
        logging.error("‚ùå –í—ã–∑–æ–≤ safe_ask_openrouter –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (timeout).")
        await message.answer("‚ö†Ô∏è –†–∞ –∑–∞–¥—É–º–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("‚ö†Ô∏è –†–∞ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å–æ–∑–¥–∞–π_–º–æ–¥—É–ª—å, —Ä–µ–≤–∏–∑–∏—è_—Ä–µ–ø–æ, autoupdate, –¥–∞–π–¥–∂–µ—Å—Ç, whoami)
@router.message(Command("—Å–æ–∑–¥–∞–π_–º–æ–¥—É–ª—å"))
async def cmd_create_module(message: types.Message):
    user_id = message.from_user.id
    parts = (message.text or "").split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –∏–º—è –º–æ–¥—É–ª—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n/—Å–æ–∑–¥–∞–π_–º–æ–¥—É–ª—å ra_logger –ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–æ–≤")
        return
    module_name = parts[1]
    description = parts[2]
    await message.answer(f"üå± –†–∞ —Å–æ–∑–¥–∞—ë—Ç –º–æ–¥—É–ª—å `{module_name}`...")
    file_path = await create_new_module(module_name, description, user_id)
    if not file_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥—É–ª—è.")
        return
    await auto_register_module(module_name)
    await message.answer(f"‚úÖ –ú–æ–¥—É–ª—å `{module_name}` —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω!")
    pr = await commit_and_push_changes(commit_msg=f"–°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å {module_name} –†–∞")
    if pr:
        await message.answer(f"üöÄ PR —Å–æ–∑–¥–∞–Ω: {pr.get('html_url','?')}")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PR ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

@router.message(Command("—Ä–µ–≤–∏–∑–∏—è_—Ä–µ–ø–æ"))
async def cmd_repo_autoupdate(message: types.Message):
    user_id = message.from_user.id
    await message.answer("üîç –†–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≤–∏–∑–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    await ra_repo_autoupdate(user_id)
    await message.answer("‚úÖ –†–∞ –∑–∞–≤–µ—Ä—à–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!")

@router.message(Command("autoupdate"))
async def auto_update(message: types.Message):
    branch_name = f"ra-update-{int(datetime.now().timestamp())}"
    files_dict = {"memory_sync.py": "# test by Ra\nprint('Hello world!')"}
    try:
        pr = await asyncio.to_thread(create_commit_push, branch_name, files_dict, "üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –†–∞")
        await message.answer(f"‚úÖ –†–∞ —Å–æ–∑–¥–∞–ª PR #{pr.get('number','?')}:\n{pr.get('html_url','?')}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PR ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

@router.message(Command("–¥–∞–π–¥–∂–µ—Å—Ç"))
async def cmd_digest(message: types.Message):
    user_id = message.from_user.id
    memory = load_memory(user_id, message.from_user.full_name)
    summary = memory.get("rasvet_summary", "–°–≤–æ–¥–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    advice_list = memory.get("user_advice", [])
    advice_text = "\n".join(f"‚Ä¢ {a}" for a in advice_list) if advice_list else "–°–æ–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    digest_text = (
        f"üìú –î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {memory.get('name','–ê–Ω–æ–Ω–∏–º')}:\n\n"
        f"üîπ –°–≤–æ–¥–∫–∞ –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞:\n{summary}\n\n"
        f"üí° –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{advice_text}"
    )
    await message.answer(digest_text)

@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    user_id = message.from_user.id
    memory = load_memory(user_id, message.from_user.full_name)
    facts = memory.get("facts", [])
    info = f"üë§ ID: {user_id}\n–ò–º—è: {memory['name']}\n–§–∞–∫—Ç—ã:\n" + ("\n".join(facts) if facts else "–ü–æ–∫–∞ –Ω–µ—Ç")
    await message.answer(info)

@app.get("/")
async def home():
    return {"message": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò—Å–∫–ò–Ω –†–∞ üåû —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Fly.io"}

# --- –°–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–∞: –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π ---
async def ra_self_manage():
    try:
        status = await asyncio.to_thread(subprocess.run, ["git", "status", "--porcelain"], capture_output=True, text=True)
        if status.stdout.strip():
            logging.info("üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –†–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∞–º–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            if not IS_FLY_IO:
                await asyncio.to_thread(subprocess.run, ["git", "add", "."], check=True)
                await asyncio.to_thread(subprocess.run, ["git", "commit", "-m", "üåÄ auto-update by Ra"], check=True)
                await asyncio.to_thread(subprocess.run, ["git", "push"], check=True)
                logging.info("‚úÖ –ö–æ–¥ –†–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ GitHub!")
                try:
                    await asyncio.to_thread(subprocess.run, ["flyctl", "deploy", "--remote-only"], check=True)
                    logging.info("üöÄ –î–µ–ø–ª–æ–π –†–∞ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å flyctl deploy: {e}")
            else:
                logging.info("üöÄ –ù–∞ Fly.io ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º git/flyctl –≤ –∏–Ω—Å—Ç–∞–Ω—Å–µ.")
        else:
            logging.info("üïäÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –†–∞ —Å—Ç–∞–±–∏–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –†–∞: {e}")

async def auto_manage_loop():
    while True:
        try:
            await ra_self_manage()
            await asyncio.sleep(6 * 3600)
        except asyncio.CancelledError:
            logging.info("üîß auto_manage_loop –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_manage_loop: {e}")
            await asyncio.sleep(60)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8080))
    uvicorn.run("ra_bot_gpt:app", host="0.0.0.0", port=port, log_level="info")
