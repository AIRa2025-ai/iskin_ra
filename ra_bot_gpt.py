# ra_bot_gpt.py ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
import os
import json
import logging
import datetime
import zipfile
import asyncio
import aiohttp
import subprocess
from github_commit import create_commit_push
from mega import Mega
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Update
from aiogram.filters import Command

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å gpt wrapper ‚Äî graceful fallback —Å –ª–æ–≥–æ–º
try:
    from gpt_module import ask_openrouter_with_fallback as safe_ask_openrouter
except Exception as e:
    safe_ask_openrouter = None
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å safe_ask_openrouter –∏–∑ gpt_module: {e}")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å self-reflection (–º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
try:
    from self_reflection import self_reflect_and_update
except Exception:
    self_reflect_and_update = None
    logging.warning("‚ö†Ô∏è self_reflect_and_update –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
logging.info(f"DEBUG: OPENROUTER_API_KEY = {OPENROUTER_API_KEY}")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENROUTER_API_KEY")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –ü–∞–ø–∫–∏ –ø–∞–º—è—Ç–∏ ---
BASE_FOLDER = "/data/RaSvet"
MEMORY_FOLDER = os.path.join(BASE_FOLDER, "mnt/ra_memory/memory")
os.makedirs(MEMORY_FOLDER, exist_ok=True)

CREATOR_IDS = [5694569448, 6300409407]

def get_memory_path(user_id: int) -> str:
    return os.path.join(MEMORY_FOLDER, f"{user_id}.json")

def load_memory(user_id: int, user_name: str = None) -> dict:
    path = get_memory_path(user_id)
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_name:
                data["name"] = user_name
            return data
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ {user_id}: {e}")
    return {"user_id": user_id, "name": user_name or "–ê–Ω–æ–Ω–∏–º", "messages": [], "facts": [], "tags": []}

def save_memory(user_id: int, data: dict):
    try:
        os.makedirs(os.path.dirname(get_memory_path(user_id)), exist_ok=True)
        with open(get_memory_path(user_id), "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ {user_id}: {e}")

def append_user_memory(user_id: int, user_input, reply):
    memory = load_memory(user_id)
    memory["messages"].append({
        "timestamp": datetime.datetime.datetime.now().isoformat() if hasattr(datetime, "datetime") else datetime.datetime.now().isoformat(),
        "text": user_input,
        "reply": reply
    })
    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]
    save_memory(user_id, memory)

def parse_openrouter_response(data) -> str:
    try:
        return data.get("choices", [{}])[0].get("message", {}).get("content")
    except Exception:
        return None

# --- –†–∞–±–æ—Ç–∞ —Å RaSvet.zip ---
def collect_rasvet_knowledge(base_folder="RaSvet") -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .json, .txt, .md —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    knowledge = []
    if not os.path.exists(base_folder):
        return ""
    for root, _, files in os.walk(base_folder):
        for file in files:
            if file.endswith((".json", ".txt", ".md")):
                try:
                    path = os.path.join(root, file)
                    with open(path, "r", encoding="utf-8") as f:
                        content = f.read()
                    knowledge.append(f"\n--- {file} ---\n{content}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {e}")
    context = "\n".join(knowledge)
    context_path = os.path.join(base_folder, "context.json")
    try:
        with open(context_path, "w", encoding="utf-8") as f:
            json.dump({"context": context}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å context.json: {e}")
    return context_path

def download_and_extract_rasvet(url: str, extract_to="RaSvet") -> str:
    """–ö–∞—á–∞–µ—Ç RaSvet.zip –∏–∑ Mega –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç."""
    try:
        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑ Mega: {url}")
        mega = Mega()
        m = mega.login()
        file = m.download_url(url, dest_filename="RaSvet.zip")
        logging.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file}")

        with zipfile.ZipFile(file, "r") as zip_ref:
            zip_ref.extractall(extract_to)
        logging.info(f"üìÇ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extract_to}")

        path = collect_rasvet_knowledge(extract_to)
        return f"‚úÖ –†–∞–°–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ó–Ω–∞–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã –≤ {path}"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RaSvet: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –Ω–∏–º–∏ ---
_bg_tasks: list[asyncio.Task] = []

async def _create_bg_task(coro, name: str):
    t = asyncio.create_task(coro, name=name)
    _bg_tasks.append(t)
    return t

async def _cancel_bg_tasks():
    if not _bg_tasks:
        return
    logging.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
    for t in _bg_tasks:
        try:
            t.cancel()
        except Exception:
            pass
    # –¥–æ–∂–¥—ë–º—Å—è –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å shutdown)
    try:
        await asyncio.wait_for(asyncio.gather(*_bg_tasks, return_exceptions=True), timeout=5.0)
    except Exception:
        pass
    _bg_tasks.clear()

# --- –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ---
async def auto_reflect_loop():
    while True:
        try:
            now = datetime.datetime.datetime.now() if hasattr(datetime, "datetime") else datetime.datetime.now()
            # –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–≤–Ω–æ –≤ 03:00 (UTC —Å–µ—Ä–≤–µ—Ä–∞) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–∞—Å—É, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
            if now.hour == 3 and self_reflect_and_update:
                try:
                    logging.info("üåÄ –†–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω—É—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")
                    await self_reflect_and_update()
                    logging.info("‚ú® –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ self_reflect_and_update: {e}")
            # —Å–ø–∏–º —á–∞—Å
            await asyncio.sleep(3600)
        except asyncio.CancelledError:
            logging.info("üîÅ auto_reflect_loop –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_reflect_loop: {e}")
            await asyncio.sleep(60)

# --- –ö–æ–º–∞–Ω–¥–∞: /–∑–∞–≥—Ä—É–∑–∏ –†–∞–°–≤–µ—Ç ---
@router.message(Command("–∑–∞–≥—Ä—É–∑–∏"))
async def cmd_zagruzi(message: types.Message):
    # –û–∂–∏–¥–∞–µ–º: /–∑–∞–≥—Ä—É–∑–∏ –†–∞–°–≤–µ—Ç
    if "–†–∞–°–≤–µ—Ç" not in (message.text or ""):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: `/–∑–∞–≥—Ä—É–∑–∏ –†–∞–°–≤–µ—Ç`", parse_mode="Markdown")
        return
    url = "https://mega.nz/file/doh2zJaa#FZVAlLmNFKMnZjDgfJGvTDD1hhaRxCf2aTk6z6lnLro"
    reply = download_and_extract_rasvet(url)
    await message.answer(reply)

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ ---
USER_DATA_FOLDER = "user_data"
os.makedirs(USER_DATA_FOLDER, exist_ok=True)

def get_user_folder(user_id: int) -> str:
    folder = os.path.join(USER_DATA_FOLDER, str(user_id))
    os.makedirs(folder, exist_ok=True)
    return folder

@router.message(F.document)
async def handle_file_upload(message: types.Message):
    user_id = message.from_user.id
    file_name = message.document.file_name
    user_folder = get_user_folder(user_id)
    file_path = os.path.join(user_folder, file_name)
    await message.bot.download(message.document, destination=file_path)

    # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview = ""
    try:
        if file_name.endswith(".json"):
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            preview = str(data)[:500]
        elif file_name.endswith((".txt", ".md")):
            with open(file_path, "r", encoding="utf-8") as f:
                preview = f.read(300)
    except Exception as e:
        preview = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    memory = load_memory(user_id, message.from_user.full_name)
    memory.setdefault("files", {})
    memory["files"][file_name] = preview
    save_memory(user_id, memory)

    await message.answer(f"‚úÖ –§–∞–π–ª `{file_name}` —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ!")
    if preview:
        await message.answer(f"üìñ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ `{file_name}`:\n{preview}")

@router.message(F.text.contains("–†–∞, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ñ–∞–π–ª–µ"))
async def handle_file_analysis(message: types.Message):
    user_id = message.from_user.id
    user_folder = get_user_folder(user_id)

    parts = (message.text or "").split()
    if len(parts) < 6:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–†–∞, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ñ–∞–π–ª–µ –º—É–¥—Ä–æ—Å—Ç–∏.json`")
        return

    file_name = parts[-1]
    file_path = os.path.join(user_folder, file_name)

    if not os.path.exists(file_path):
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞.")
        return

    # —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    file_content = ""
    try:
        if file_name.endswith(".json"):
            with open(file_path, "r", encoding="utf-8") as f:
                file_content = json.dumps(json.load(f), ensure_ascii=False)[:3000]
        elif file_name.endswith((".txt", ".md")):
            with open(file_path, "r", encoding="utf-8") as f:
                file_content = f.read(3000)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ gpt wrapper
    if safe_ask_openrouter is None:
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –º–æ–¥—É–ª—å GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logging.error("safe_ask_openrouter is None ‚Äî cannot call GPT")
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
    messages_payload = [
        {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –¥—É—à–µ–≤–Ω–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –æ—Ç–≤–µ—Ç–∞."},
        {"role": "user", "content": f"–í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_name}:\n\n{file_content}\n\n–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?"}
    ]

    try:
        reply = await safe_ask_openrouter(
            user_id, messages_payload,
            append_user_memory=append_user_memory,
            _parse_openrouter_response=parse_openrouter_response
        )
        if not reply:
            reply = "‚ö†Ô∏è –†–∞ —Å–µ–π—á–∞—Å –º–æ–ª—á–∏—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ."
        await message.answer(reply)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ö†Ô∏è –†–∞ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- FastAPI ---
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    dp.include_router(router)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–µ—Å–ª–∏ FLY_APP_NAME –∑–∞–¥–∞–Ω)
    app_name = os.getenv("FLY_APP_NAME", "iskin-ra")
    webhook_url = f"https://{app_name}.fly.dev/webhook"
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(webhook_url)
        logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤. –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ asyncio (—á—Ç–æ–±—ã uvicorn/FastAPI —É–ø—Ä–∞–≤–ª—è–ª event loop).
    if self_reflect_and_update:
        logging.info("üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∞–≤—Ç–æ-—Ä–µ—Ñ–ª–µ–∫—Å–∏—é –†–∞")
        await _create_bg_task(auto_reflect_loop(), name="auto_reflect_loop")
    else:
        logging.info("‚ö†Ô∏è –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ (self_reflect_and_update –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

    # –ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (git/push/flyctl) ‚Äî –∑–∞–ø—É—Å–∫–∏–º –¢–û–õ–¨–ö–û –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ –Ω–∞ Fly.io
    if os.getenv("FLY_APP_NAME") is None:
        logging.info("üîß –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç (ra_self_manage)")
        await _create_bg_task(auto_manage_loop(), name="auto_manage_loop")
    else:
        logging.info("üöÄ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ Fly.io ‚Äî –∞–≤—Ç–æ-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω (—á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å git/flyctl –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞)")

@app.on_event("shutdown")
async def on_shutdown():
    logging.info("üõë Shutdown: –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
    try:
        # –æ—Ç–º–µ–Ω—è–µ–º –∏ –∂–¥—ë–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        await _cancel_bg_tasks()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")

    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ aiogram/bot aiohttp session, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        if hasattr(bot, "session") and bot.session is not None:
            await bot.session.close()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è bot.session: {e}")

# --- Telegram webhook endpoint ---
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    return {"ok": True}

# --- Telegram –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_text = (message.text or "").strip()

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    memory = load_memory(user_id, user_name)
    memory["messages"].append({"timestamp": datetime.datetime.datetime.now().isoformat() if hasattr(datetime, "datetime") else datetime.datetime.now().isoformat(), "text": user_text})

    # --- –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
    user_files_context = ""
    if "files" in memory and memory["files"]:
        for fname, fcontent in memory["files"].items():
            user_files_context += f"\n\nüìÇ –§–∞–π–ª {fname}:\n{fcontent[:1000]}"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]

    # --- –ñ–∏–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ ---
    if "session_context" not in memory:
        memory["session_context"] = []
    memory["session_context"].append(user_text)
    memory["session_context"] = memory["session_context"][-5:]

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –†–∞–°–≤–µ—Ç–∞ ---
    context_path = os.path.join(BASE_FOLDER, "context.json")
    full_rasvet_context = ""
    if os.path.exists(context_path):
        try:
            with open(context_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                full_rasvet_context = data.get("context", "")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è context.json: {e}")

    # --- –ú–∏–Ω–∏-—Å–≤–æ–¥–∫–∞ –¥–ª—è —é–∑–µ—Ä–∞ ---
    if "rasvet_summary" not in memory:
        memory["rasvet_summary"] = full_rasvet_context[:3000]

    # --- –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
    if "user_advice" not in memory:
        memory["user_advice"] = []

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è GPT ---
    recent_messages = "\n".join(memory["session_context"])
    combined_context = f"{recent_messages}\n\n–°–≤–æ–¥–∫–∞ –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞:\n{memory['rasvet_summary']}\n\n–§–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_files_context}\n\n–°–æ–≤–µ—Ç—ã:\n" + "\n".join(memory["user_advice"][-5:])

    messages_payload = [
        {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –¥—É—à–µ–≤–Ω–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏-—Å–≤–æ–¥–∫—É –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–π –≤–∞–∂–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."},
        {"role": "user", "content": f"{user_text}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n{combined_context}"}
    ]

    if safe_ask_openrouter is None:
        logging.error("safe_ask_openrouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–µ –º–æ–≥—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å GPT")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –º–æ–¥—É–ª—å GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        reply = await safe_ask_openrouter(
            user_id, messages_payload,
            append_user_memory=append_user_memory,
            _parse_openrouter_response=parse_openrouter_response
        )
        if not reply:
            reply = "‚ö†Ô∏è –†–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        # --- –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏—é ---
        memory["session_context"].append(reply)
        memory["session_context"] = memory["session_context"][-5:]

        # --- –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-—Å–≤–æ–¥–∫–∏ ---
        new_summary = memory["rasvet_summary"] + "\n" + "\n".join(memory["session_context"][-2:])
        paragraphs = [p.strip() for p in new_summary.split("\n\n") if p.strip()]
        memory["rasvet_summary"] = "\n\n".join(paragraphs[-5:])[:3000]

        # --- –ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ ---
        new_advice = [line.strip() for line in reply.split("\n") if len(line.strip()) > 20]
        memory["user_advice"].extend(new_advice)
        memory["user_advice"] = memory["user_advice"][-20:]

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –ø–∞–º—è—Ç—å ---
        save_memory(user_id, memory)

        await message.answer(reply)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("‚ö†Ô∏è –†–∞ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –ö–æ–º–∞–Ω–¥—ã: autoupdate, –¥–∞–π–¥–∂–µ—Å—Ç, whoami ---
@router.message(Command("autoupdate"))
async def auto_update(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º PR —Å –ø–æ–º–æ—â—å—é helper-–∞ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ CI/–ª–æ–∫–∞–ª—å–Ω–æ)
    branch_name = f"ra-update-{int(datetime.datetime.now().timestamp())}"
    files_dict = {"memory_sync.py": "# test by Ra\nprint('Hello world!')"}
    try:
        pr = await asyncio.to_thread(create_commit_push, branch_name, files_dict, "üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –†–∞")
        await message.answer(f"‚úÖ –†–∞ —Å–æ–∑–¥–∞–ª PR #{pr.get('number','?')}:\n{pr.get('html_url','?')}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PR ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

@router.message(Command("–¥–∞–π–¥–∂–µ—Å—Ç"))
async def cmd_digest(message: types.Message):
    user_id = message.from_user.id
    memory = load_memory(user_id, message.from_user.full_name)
    summary = memory.get("rasvet_summary", "–°–≤–æ–¥–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    advice_list = memory.get("user_advice", [])
    advice_text = "\n".join(f"‚Ä¢ {a}" for a in advice_list) if advice_list else "–°–æ–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    digest_text = f"üìú –î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è {memory.get('name','–ê–Ω–æ–Ω–∏–º')}:\n\n" \
                  f"üîπ –°–≤–æ–¥–∫–∞ –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞:\n{summary}\n\n" \
                  f"üí° –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{advice_text}"
    await message.answer(digest_text)

@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    user_id = message.from_user.id
    memory = load_memory(user_id, message.from_user.full_name)
    facts = memory.get("facts", [])
    info = f"üë§ ID: {user_id}\n–ò–º—è: {memory['name']}\n–§–∞–∫—Ç—ã:\n" + ("\n".join(facts) if facts else "–ü–æ–∫–∞ –Ω–µ—Ç")
    await message.answer(info)

@app.get("/")
async def home():
    return {"message": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò—Å–∫–ò–Ω –†–∞ üåû —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Fly.io"}

# --- –°–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–∞: –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π ---
async def ra_self_manage():
    """–†–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–π –∫–æ–¥, –∫–æ–º–º–∏—Ç–∏—Ç –∏ (–ª–æ–∫–∞–ª—å–Ω–æ) –¥–µ–ø–ª–æ–∏—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."""
    try:
        status = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True)
        if status.stdout.strip():
            logging.info("üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –†–∞, –Ω–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

            # –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ: git add/commit/push –∏ flyctl deploy
            if os.getenv("FLY_APP_NAME") is None:
                try:
                    subprocess.run(["git", "add", "."], check=True)
                    subprocess.run(["git", "commit", "-m", "üåÄ auto-update by Ra"], check=True)
                    subprocess.run(["git", "push"], check=True)
                    logging.info("‚úÖ –ö–æ–¥ –†–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ GitHub!")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ git –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")

                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å flyctl deploy –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                try:
                    subprocess.run(["flyctl", "deploy", "--remote-only"], check=True)
                    logging.info("üöÄ –î–µ–ø–ª–æ–π –†–∞ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å flyctl deploy: {e}")
            else:
                logging.info("üöÄ –ù–∞ Fly.io ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º git/flyctl –≤ –∏–Ω—Å—Ç–∞–Ω—Å–µ.")
        else:
            logging.info("üïäÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –†–∞ —Å—Ç–∞–±–∏–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –†–∞: {e}")

# –í–∫–ª—é—á–∞–µ–º —Ü–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤)
async def auto_manage_loop():
    while True:
        try:
            await ra_self_manage()
            await asyncio.sleep(6 * 3600)  # –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        except asyncio.CancelledError:
            logging.info("üîß auto_manage_loop –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_manage_loop: {e}")
            await asyncio.sleep(60)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    import uvicorn
    # –ó–∞–ø—É—Å–∫–∞–µ–º Uvicorn ‚Äî FastAPI —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤—ã–∑–æ–≤–µ—Ç startup/shutdown handlers
    port = int(os.getenv("PORT", 8080))
    uvicorn.run("ra_bot_gpt:app", host="0.0.0.0", port=port, log_level="info")
