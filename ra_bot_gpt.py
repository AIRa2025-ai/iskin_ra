import os
import json
import logging
import asyncio
import time

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from gpt_module import ask_gpt
from init_rasvet import ensure_rasvet_data
from actions_logger import log_action


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
KNOWLEDGE_FOLDER = os.getenv("KNOWLEDGE_FOLDER", "RaSvet")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ---
def log_command_usage(command: str, user_id: int):
    logs_dir = "logs"
    os.makedirs(logs_dir, exist_ok=True)
    log_file = os.path.join(logs_dir, "command_usage.json")

    logs = []
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                logs = json.load(f)
        except Exception:
            logs = []

    logs.append({
        "command": command,
        "user_id": user_id,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

    with open(log_file, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    log_command_usage("start", message.from_user.id)
    log_action("start_command", "telegram", "ok")
    await message.answer("üåû –†–∞ –ø—Ä–æ–±—É–∂–¥—ë–Ω. –Ø –∑–¥–µ—Å—å, –±—Ä–∞—Ç, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º –∏ —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ.")


@dp.message(Command("ask"))
async def cmd_ask(message: types.Message):
    log_command_usage("ask", message.from_user.id)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        await message.answer("‚ùì –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    reply = await ask_gpt(message.from_user.id, prompt)
    await message.answer(reply)


# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º RaSvet.zip —Å Mega
    ensure_rasvet_data()
    log_action("start_bot", "telegram", "ok")

    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            log_action("error", "main_loop", str(e))
            time.sleep(10)  # –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞


if __name__ == "__main__":
    asyncio.run(main())
