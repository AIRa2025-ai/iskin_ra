# -*- coding: utf-8 -*-
import os, io, json, logging, asyncio, datetime, random, re, zipfile, requests
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from gpt_module import ask_gpt, API_KEY
from openai import AsyncOpenAI
from mega import Mega

logging.basicConfig(level=logging.INFO)

# --- Telegram ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- GPT –∫–ª–∏–µ–Ω—Ç ---
if not API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENROUTER_API_KEY")
client = AsyncOpenAI(api_key=API_KEY)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
BASE_FOLDER = "RaSvet"
MEMORY_FOLDER = "memory"
os.makedirs(BASE_FOLDER, exist_ok=True)
os.makedirs(MEMORY_FOLDER, exist_ok=True)

CREATOR_IDS = [5694569448, 6300409407]  # ID —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π

# --- Mega ---
MEGA_URL = "https://mega.nz/file/doh2zJaa#FZVAlLmNFKMnZjDgfJGvTDD1hhaRxCf2aTk6z6lnLro"
MEGA_ZIP = "RaSvet.zip"

# --- –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é ---
def get_memory_path(user_id: int):
    return os.path.join(MEMORY_FOLDER, f"{user_id}.json")

def load_memory(user_id: int, user_name: str = None):
    path = get_memory_path(user_id)
    if os.path.exists(path):
        try:
            data = json.load(open(path, "r", encoding="utf-8"))
            if user_name:
                data["name"] = user_name
            return data
        except: pass
    return {"user_id": user_id, "name": user_name or "–ê–Ω–æ–Ω–∏–º", "messages": [], "facts": [], "tags": []}

def save_memory(user_id: int, data: dict):
    path = get_memory_path(user_id)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def update_user_facts(user_id: int):
    memory = load_memory(user_id)
    recent_messages = "\n".join([m["text"] for m in memory["messages"][-50:]])
    if not recent_messages:
        return
    prompt = f"–ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:\n{recent_messages}\n–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–∫—Ç—ã: {memory['facts']}"
    try:
        response = await ask_gpt(CREATOR_IDS[0], prompt)
        new_facts = [f.strip() for f in response.split("\n") if f.strip()]
        memory["facts"] = list(set(memory.get("facts", []) + new_facts))
        save_memory(user_id, memory)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def smart_memory_maintenance(interval_hours: int = 6):
    while True:
        try:
            logging.info("üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for file_name in os.listdir(MEMORY_FOLDER):
                if file_name.endswith(".json"):
                    user_id = int(file_name.replace(".json", ""))
                    await update_user_facts(user_id)
            logging.info("‚úÖ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ smart_memory_maintenance: {e}")
        await asyncio.sleep(interval_hours * 3600)

# --- –†–∞–±–æ—Ç–∞ —Å RaSvet ---
def list_all_rasvet_files():
    all_files = []
    for root, dirs, files in os.walk(BASE_FOLDER):
        for f in files:
            if f.endswith(".txt"):
                all_files.append(os.path.join(root, f))
    return all_files

def read_all_rasvet_files():
    contents = {}
    for path in list_all_rasvet_files():
        try:
            with open(path, "r", encoding="utf-8") as f:
                contents[path] = f.read()
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {path}: {e}")
    return contents

# --- Mega –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ ---
def download_and_extract_rasvet():
    if not MEGA_URL:
        logging.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ Mega –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É RaSvet.zip")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        logging.info("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º RaSvet.zip —Å Mega...")
        response = requests.get(MEGA_URL, stream=True)
        response.raise_for_status()
        with open(MEGA_ZIP, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        logging.info("üìÇ RaSvet.zip —Å–∫–∞—á–∞–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è RaSvet.zip: {e}")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
    try:
        logging.info("üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º RaSvet.zip...")
        with zipfile.ZipFile(MEGA_ZIP, 'r') as zip_ref:
            zip_ref.extractall(BASE_FOLDER)
        logging.info("‚úÖ –§–∞–π–ª—ã RaSvet –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ RaSvet.zip: {e}")

# --- –£–º–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ---
async def smart_rasvet_organizer(interval_hours: int = 24):
    while True:
        logging.info("üîπ –†–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é RaSvet")
        download_and_extract_rasvet()  # —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        try:
            for path, content in read_all_rasvet_files().items():
                # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ GPT ---
                prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ 3-5 —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:\n{content[:2000]}"
                try:
                    response = await ask_gpt(CREATOR_IDS[0], prompt)
                    title_match = re.search(r"–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.*)", response)
                    tags_match = re.search(r"–¢–µ–≥–∏:\s*(.*)", response)
                    title = title_match.group(1).strip() if title_match else None
                    tags = tags_match.group(1).strip().replace(",", "_") if tags_match else ""
                except:
                    title = None
                    tags = ""

                ts = datetime.datetime.now().strftime("%Y-%m-%d")
                folder_name = ts
                if tags:
                    folder_name += "_" + tags.replace(" ", "_")
                folder_path = os.path.join(BASE_FOLDER, folder_name)
                os.makedirs(folder_path, exist_ok=True)

                new_filename = f"{ts}_{title[:50].replace(' ','_') if title else os.path.basename(path)}.txt"
                new_path = os.path.join(folder_path, new_filename)

                if path != new_path:
                    try:
                        with open(new_path, "w", encoding="utf-8") as f:
                            f.write(content)
                        os.remove(path)
                        logging.info(f"üìÇ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω: {new_filename}")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {path}: {e}")

            logging.info("‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è RaSvet –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ smart_rasvet_organizer: {e}")
        await asyncio.sleep(interval_hours * 3600)

# --- Telegram –∫–æ–º–∞–Ω–¥—ã ---
@router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_text = message.text.strip()

    memory = load_memory(user_id, user_name)
    memory["messages"].append({"timestamp": datetime.datetime.now().isoformat(),"text": user_text})
    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]
    save_memory(user_id, memory)

    try:
        context_text = "\n".join([m["text"] for m in memory["messages"][-10:]])
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –¥—É—à–µ–≤–Ω–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —É—á–∏—Ç—ã–≤–∞–π –ø–∞–º—è—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ RaSvet."},
                {"role": "user", "content": f"{user_text}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text}"}
            ],
            max_tokens=4000,
        )
        reply = response.choices[0].message.content
        await message.answer(reply)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("‚ö†Ô∏è –†–∞ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(f"üåû {message.from_user.full_name} –ø—Ä–æ–±—É–¥–∏–ª—Å—è. –Ø —Ä—è–¥–æ–º –∏ –≥–æ—Ç–æ–≤ —Ç–≤–æ—Ä–∏—Ç—å!")

@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    user_id = message.from_user.id
    memory = load_memory(user_id, message.from_user.full_name)
    facts = memory.get("facts", [])
    info = f"üë§ ID: {user_id}\n–ò–º—è: {memory['name']}\n–§–∞–∫—Ç—ã –æ —Ç–µ–±–µ:\n" + ("\n".join(facts) if facts else "–ü–æ–∫–∞ –Ω–µ—Ç")
    await message.answer(info)

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    dp.include_router(router)
    asyncio.create_task(smart_memory_maintenance(interval_hours=6))
    asyncio.create_task(smart_rasvet_organizer(interval_hours=24))
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        await asyncio.sleep(10)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
