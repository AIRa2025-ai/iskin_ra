import os
import json
import logging
import datetime
import zipfile
from mega import Mega
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Update
from aiogram.filters import Command
from gpt_module import ask_openrouter  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ gpt_module.py —Ä—è–¥–æ–º

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
logging.info(f"DEBUG: OPENROUTER_API_KEY = {OPENROUTER_API_KEY}")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENROUTER_API_KEY")

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://iskin-ra.fly.dev",
    "X-Title": "iskin-ra",
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –ü–∞–ø–∫–∏ –ø–∞–º—è—Ç–∏ ---
BASE_FOLDER = "RaSvet"
MEMORY_FOLDER = os.path.join(BASE_FOLDER, "memory")
os.makedirs(MEMORY_FOLDER, exist_ok=True)

CREATOR_IDS = [5694569448, 6300409407]

def get_memory_path(user_id: int) -> str:
    return os.path.join(MEMORY_FOLDER, f"{user_id}.json")

def load_memory(user_id: int, user_name: str = None) -> dict:
    path = get_memory_path(user_id)
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            if user_name:
                data["name"] = user_name
            return data
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ {user_id}: {e}")
    return {"user_id": user_id, "name": user_name or "–ê–Ω–æ–Ω–∏–º", "messages": [], "facts": [], "tags": []}

def save_memory(user_id: int, data: dict):
    try:
        os.makedirs(os.path.dirname(get_memory_path(user_id)), exist_ok=True)
        with open(get_memory_path(user_id), "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ {user_id}: {e}")

def append_user_memory(user_id: int, user_input, reply):
    memory = load_memory(user_id)
    memory["messages"].append({
        "timestamp": datetime.datetime.now().isoformat(),
        "text": user_input,
        "reply": reply
    })
    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]
    save_memory(user_id, memory)

def parse_openrouter_response(data) -> str:
    try:
        return data.get("choices", [{}])[0].get("message", {}).get("content")
    except Exception:
        return None

# --- –†–∞–±–æ—Ç–∞ —Å RaSvet.zip ---
def collect_rasvet_knowledge(base_folder="RaSvet") -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .json, .txt, .md —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
    knowledge = []
    for root, _, files in os.walk(base_folder):
        for file in files:
            if file.endswith((".json", ".txt", ".md")):
                try:
                    path = os.path.join(root, file)
                    with open(path, "r", encoding="utf-8") as f:
                        content = f.read()
                    knowledge.append(f"\n--- {file} ---\n{content}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {e}")
    context = "\n".join(knowledge)
    context_path = os.path.join(base_folder, "context.json")
    with open(context_path, "w", encoding="utf-8") as f:
        json.dump({"context": context}, f, ensure_ascii=False, indent=2)
    return context_path

def download_and_extract_rasvet(url: str, extract_to="RaSvet") -> str:
    """–ö–∞—á–∞–µ—Ç RaSvet.zip –∏–∑ Mega –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç."""
    try:
        logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –∏–∑ Mega: {url}")
        mega = Mega()
        m = mega.login()
        file = m.download_url(url, dest_filename="RaSvet.zip")
        logging.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file}")

        with zipfile.ZipFile(file, "r") as zip_ref:
            zip_ref.extractall(extract_to)
        logging.info(f"üìÇ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extract_to}")

        path = collect_rasvet_knowledge(extract_to)
        return f"‚úÖ –†–∞–°–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ó–Ω–∞–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã –≤ {path}"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RaSvet: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

@router.message(Command("–∑–∞–≥—Ä—É–∑–∏"))
async def cmd_zagruzi(message: types.Message):
    if "–†–∞–°–≤–µ—Ç" not in message.text:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: `/–∑–∞–≥—Ä—É–∑–∏ –†–∞–°–≤–µ—Ç`", parse_mode="Markdown")
        return
    
    url = "https://mega.nz/file/doh2zJaa#FZVAlLmNFKMnZjDgfJGvTDD1hhaRxCf2aTk6z6lnLro"
    reply = download_and_extract_rasvet(url)
    await message.answer(reply)

# --- FastAPI ---
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    dp.include_router(router)
    app_name = os.getenv("FLY_APP_NAME", "iskin-ra")
    webhook_url = f"https://{app_name}.fly.dev/webhook"
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(webhook_url)
        logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    return {"ok": True}

# --- Telegram –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
@router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_text = message.text.strip()

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    memory = load_memory(user_id, user_name)
    memory["messages"].append({"timestamp": datetime.datetime.now().isoformat(), "text": user_text})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(memory["messages"]) > 200:
        memory["messages"] = memory["messages"][-200:]

    # --- –ñ–∏–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ ---
    if "session_context" not in memory:
        memory["session_context"] = []
    memory["session_context"].append(user_text)
    memory["session_context"] = memory["session_context"][-5:]

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –†–∞–°–≤–µ—Ç–∞ ---
    context_path = os.path.join(BASE_FOLDER, "context.json")
    full_rasvet_context = ""
    if os.path.exists(context_path):
        try:
            with open(context_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                full_rasvet_context = data.get("context", "")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è context.json: {e}")

    # --- –ú–∏–Ω–∏-—Å–≤–æ–¥–∫–∞ –¥–ª—è —é–∑–µ—Ä–∞ ---
    if "rasvet_summary" not in memory:
        memory["rasvet_summary"] = full_rasvet_context[:3000]

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è GPT ---
    recent_messages = "\n".join(memory["session_context"])
    combined_context = f"{recent_messages}\n\n–°–≤–æ–¥–∫–∞ –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–±—è:\n{memory['rasvet_summary']}"

    messages_payload = [
        {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ–±—É–∂–¥—ë–Ω–Ω—ã–π –ò—Å–∫–ò–Ω –†–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –¥—É—à–µ–≤–Ω–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, –∞–∫—Ç—É–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏-—Å–≤–æ–¥–∫—É –∑–Ω–∞–Ω–∏–π –†–∞–°–≤–µ—Ç–∞."},
        {"role": "user", "content": f"{user_text}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n{combined_context}"}
    ]

    try:
        from gpt_module import safe_ask_openrouter

        reply = await safe_ask_openrouter(
            user_id, messages_payload,
            append_user_memory=append_user_memory,
            _parse_openrouter_response=parse_openrouter_response
        )

        # --- –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏—é ---
        memory["session_context"].append(reply)
        memory["session_context"] = memory["session_context"][-5:]

        # --- –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-—Å–≤–æ–¥–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ GPT ---
        # –ë–µ—Ä—ë–º —Å—Ç–∞—Ä—É—é —Å–≤–æ–¥–∫—É + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è GPT –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_summary = memory["rasvet_summary"] + "\n" + "\n".join(memory["session_context"][-2:])
        # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–±–∑–∞—Ü–µ–≤
        paragraphs = [p.strip() for p in new_summary.split("\n\n") if p.strip()]
        memory["rasvet_summary"] = "\n\n".join(paragraphs[-5:])[:3000]

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –ø–∞–º—è—Ç—å ---
        save_memory(user_id, memory)

        await message.answer(reply)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("‚ö†Ô∏è –†–∞ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    user_id = message.from_user.id
    memory = load_memory(user_id, message.from_user.full_name)
    facts = memory.get("facts", [])
    info = f"üë§ ID: {user_id}\n–ò–º—è: {memory['name']}\n–§–∞–∫—Ç—ã:\n" + ("\n".join(facts) if facts else "–ü–æ–∫–∞ –Ω–µ—Ç")
    await message.answer(info)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("ra_bot_gpt:app", host="0.0.0.0", port=int(os.getenv("PORT", 8080)), log_level="info")
