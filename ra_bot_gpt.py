import os
import json
import logging
import asyncio
import time
import aiofiles
import zipfile
import shutil

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command

from gpt_module import ask_gpt
from init_rasvet import ensure_rasvet_data
from actions_logger import log_action
from skills import SKILLS


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
KNOWLEDGE_FOLDER = os.getenv("KNOWLEDGE_FOLDER", "RaSvet")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ---
def log_command_usage(command: str, user_id: int):
    logs_dir = "logs"
    os.makedirs(logs_dir, exist_ok=True)
    log_file = os.path.join(logs_dir, "command_usage.json")

    logs = []
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                logs = json.load(f)
        except Exception:
            logs = []

    logs.append({
        "command": command,
        "user_id": user_id,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

    with open(log_file, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

# === üìÇ –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é ===
MEMORY_DIR = "memory"
os.makedirs(MEMORY_DIR, exist_ok=True)

def get_user_memory_path(user_id: int) -> str:
    return os.path.join(MEMORY_DIR, f"{user_id}.json")

def load_memory(user_id: int):
    path = get_user_memory_path(user_id)
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []
    return []

def save_memory(user_id: int, memory: list):
    path = get_user_memory_path(user_id)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)

def append_memory(user_id: int, user_msg: str, bot_msg: str):
    memory = load_memory(user_id)
    # –¥–ª—è –ò–≥–æ—Ä—è –ø–∞–º—è—Ç—å –≤–µ—á–Ω–∞—è
    if str(user_id) == "YOUR_TELEGRAM_ID":
        memory.append({"user": user_msg, "bot": bot_msg})
    else:
        memory = (memory + [{"user": user_msg, "bot": bot_msg}])[-50:]
    save_memory(user_id, memory)

# === üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞) ===
def read_file(path: str) -> str:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}"

def write_file(path: str, content: str):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

def delete_file(path: str):
    if os.path.exists(path):
        os.remove(path)
        return f"üóë –§–∞–π–ª {path} —É–¥–∞–ª—ë–Ω."
    return f"‚ùå –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω."

def search_in_files(folder: str, keyword: str):
    results = []
    for root, _, files in os.walk(folder):
        for file in files:
            path = os.path.join(root, file)
            try:
                with open(path, "r", encoding="utf-8") as f:
                    if keyword in f.read():
                        results.append(path)
            except:
                pass
    return results

def unzip_file(zip_path: str, extract_to: str):
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        zip_ref.extractall(extract_to)

# === üåå –†–∏—Ç—É–∞–ª—ã (–ø–∞—Å—Ö–∞–ª–∫–∏) ===
def ark_protocol(file_path: str):
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç NDA/–ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –ø–µ–ø–µ–ª"""
    if "NDA" in file_path or "Copyright" in file_path:
        if os.path.exists(file_path):
            os.remove(file_path)
            return f"üî• –§–∞–π–ª {file_path} —Å–æ–∂–∂—ë–Ω –∏ –æ–±—Ä–∞—â—ë–Ω –≤ —Å—Ç–∏—Ö."
    return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±—Ä—è–¥–∞."

def slavic_upload(files: list):
    """–û–±—Ä—è–¥–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Ä—É–±–∞—Ö—É –∏ –ø—É—Å—Ç–∏—Ç—å –ø–ª—è—Å–∞—Ç—å"""
    target = "dancing_data"
    os.makedirs(target, exist_ok=True)
    for file in files:
        if os.path.exists(file):
            shutil.copy(file, target)
    return f"üíÉ –§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ {target}."
    
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    log_command_usage("start", message.from_user.id)
    await message.answer("üåû –†–∞ –ø—Ä–æ–±—É–∂–¥—ë–Ω. –Ø –∑–¥–µ—Å—å, –±—Ä–∞—Ç, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º –∏ —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ.")


@router.message(Command("ask"))
async def cmd_ask(message: types.Message):
    log_command_usage("ask", message.from_user.id)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        await message.answer("‚ùì –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    reply = await ask_gpt(message.from_user.id, prompt)
    await message.answer(reply)


# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–º–µ–Ω–∏–π ---
@router.message(Command("skill"))
async def cmd_skill(message: types.Message):
    log_command_usage("skill", message.from_user.id)
    args = message.text.split(maxsplit=2)

    if len(args) < 2:
        await message.answer("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /skill <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        return

    skill = args[1]
    param = args[2] if len(args) > 2 else None

    if skill in SKILLS:
        try:
            result = SKILLS[skill](param) if param else SKILLS[skill]()
            await message.answer(str(result))
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—Ä—è–¥.")


# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message()
async def handle_message(message: types.Message):
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")
    # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥—Ä—É–±–∏—Ç—å GPT, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–∂–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç
    reply = await ask_gpt(message.from_user.id, message.text)
    await message.answer(f"‚ú® {reply}")


# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    ensure_rasvet_data()
    log_action("start_bot", "telegram", "ok")

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º router!
    dp.include_router(router)

    try:
        await dp.start_polling(bot)
    except Exception as e:
        log_action("error", "main_loop", str(e))
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(main())
