import os
import json
import logging
import asyncio
import time
import shutil
import zipfile
import datetime

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command

from gpt_module import ask_gpt
from init_rasvet import ensure_rasvet_data
from actions_logger import log_action
from skills import SKILLS


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# === –ó–∞–≥—Ä—É–∂–∞–µ–º creator_id –∏–∑ bot_config.json ===
with open("bot_config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

CREATOR_ID = int(config.get("creator_id", 0))

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ===
def log_command_usage(command: str, user_id: int):
    logs_dir = "logs"
    os.makedirs(logs_dir, exist_ok=True)
    log_file = os.path.join(logs_dir, "command_usage.json")

    logs = []
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                logs = json.load(f)
        except Exception:
            logs = []

    logs.append({
        "command": command,
        "user_id": user_id,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

    with open(log_file, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)


# === üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ RaSvet ===
BASE_FOLDER = "RaSvet"
os.makedirs(BASE_FOLDER, exist_ok=True)

def create_file(folder: str, content: str):
    os.makedirs(folder, exist_ok=True)
    # —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(folder, f"{timestamp}.txt")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    return filename, content

def delete_file(folder: str):
    filename = os.path.join(folder, "new_file.txt")
    if os.path.exists(filename):
        os.remove(filename)
        return f"üóë –§–∞–π–ª {filename} —É–¥–∞–ª—ë–Ω."
    return "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

def read_file(folder: str):
    filename = os.path.join(folder, "new_file.txt")
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return f.read()
    return "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."


# --- –ö–æ–º–∞–Ω–¥–∞ /whoami ---
@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    await message.answer(f"üë§ –¢–≤–æ–π ID: {message.from_user.id}\n"
                         f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {'–î–∞' if message.from_user.id == CREATOR_ID else '–ù–µ—Ç'}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ (–°–æ–∑–¥–∞—Ç–µ–ª—å/–¥—Ä—É–≥–∏–µ) ---
@router.message()
async def handle_message(message: types.Message):
    text = message.text.lower()

    # --- –°–æ–∑–¥–∞—Ç–µ–ª—å ---
    if message.from_user.id == CREATOR_ID:
        if "—Å–æ–∑–¥–∞–π" in text:
            target_folder = BASE_FOLDER
            if "–ø–∞–ø–∫–µ" in text:
                parts = text.split("–ø–∞–ø–∫–µ", 1)
                if len(parts) > 1:
                    folder_name = parts[1].split()[0].strip()
                    if folder_name:
                        target_folder = os.path.join(BASE_FOLDER, folder_name)

            content = "‚ú® –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –†–∞ –ø–æ —Å–ª–æ–≤—É –°–æ–∑–¥–∞—Ç–µ–ª—è."
            if "–Ω–∞–ø–∏—à–∏" in text:
                content = text.split("–Ω–∞–ø–∏—à–∏", 1)[1].strip() or content

            filename, file_content = create_file(target_folder, content)
            await message.answer(f"üìÇ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}\n\nüìù {file_content}")

        elif "—É–¥–∞–ª–∏" in text:
            result = delete_file(BASE_FOLDER)
            await message.answer(result)

        elif "–ø—Ä–æ—á–∏—Ç–∞–π" in text:
            content = read_file(BASE_FOLDER)
            await message.answer(f"üìñ {content}")

        else:
            reply = await ask_gpt(message.from_user.id, message.text)
            await message.answer(f"‚ú® {reply}")

    # --- –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
    else:
        if "–ø—Ä–æ—á–∏—Ç–∞–π" in text:
            content = read_file(BASE_FOLDER)
            await message.answer(f"üìñ {content}")
        else:
            reply = await ask_gpt(message.from_user.id, message.text)
            await message.answer(f"üåû {reply}")


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    log_command_usage("start", message.from_user.id)
    await message.answer("üåû –†–∞ –ø—Ä–æ–±—É–∂–¥—ë–Ω. –Ø –∑–¥–µ—Å—å, –±—Ä–∞—Ç, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º –∏ —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ.")


# --- –ö–æ–º–∞–Ω–¥–∞ /ask ---
@router.message(Command("ask"))
async def cmd_ask(message: types.Message):
    log_command_usage("ask", message.from_user.id)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        await message.answer("‚ùì –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    reply = await ask_gpt(message.from_user.id, prompt)
    await message.answer(reply)


# --- –ö–æ–º–∞–Ω–¥–∞ /skill ---
@router.message(Command("skill"))
async def cmd_skill(message: types.Message):
    log_command_usage("skill", message.from_user.id)
    args = message.text.split(maxsplit=2)

    if len(args) < 2:
        await message.answer("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /skill <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        return

    skill = args[1]
    param = args[2] if len(args) > 2 else None

    if skill in SKILLS:
        try:
            result = SKILLS[skill](param) if param else SKILLS[skill]()
            await message.answer(str(result))
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—Ä—è–¥.")


# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    ensure_rasvet_data()
    log_action("start_bot", "telegram", "ok")
    dp.include_router(router)

    try:
        await dp.start_polling(bot)
    except Exception as e:
        log_action("error", "main_loop", str(e))
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(main())
