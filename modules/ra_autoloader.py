# modules/ra_autoloader.py
import os
import importlib
import json
import logging

class RaAutoloader:
    """
    üåû –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –†–∞.
    ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É modules/
    ‚Äî –ß–∏—Ç–∞–µ—Ç ra_manifest.json
    ‚Äî –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
    ‚Äî –°–æ–∑–¥–∞—ë—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """

    def __init__(self, modules_path="modules", manifest_path="data/ra_manifest.json"):
        self.modules_path = modules_path
        self.manifest_path = manifest_path
        self.modules = {}

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs(self.modules_path, exist_ok=True)
        os.makedirs(os.path.dirname(self.manifest_path), exist_ok=True)

    # --- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ modules/ ---
    def scan_modules(self):
        try:
            files = [
                f[:-3] for f in os.listdir(self.modules_path)
                if f.endswith(".py") and not f.startswith("__")
            ]
            logging.info(f"[RaAutoloader] üîç –ù–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏: {files}")
            return files
        except Exception as e:
            logging.error(f"[RaAutoloader] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ modules/: {e}")
            return []

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ ---
    def load_manifest(self):
        try:
            if not os.path.exists(self.manifest_path):
                # –µ—Å–ª–∏ –Ω–µ—Ç manifest ‚Äî —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π
                base_manifest = {"active_modules": []}
                with open(self.manifest_path, "w", encoding="utf-8") as f:
                    json.dump(base_manifest, f, ensure_ascii=False, indent=2)
                logging.warning("[RaAutoloader] ‚ö†Ô∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª ‚Äî —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")

            with open(self.manifest_path, "r", encoding="utf-8") as f:
                manifest = json.load(f)
                active = manifest.get("active_modules", [])

            logging.info(f"[RaAutoloader] üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø–æ manifest: {active}")
            return active

        except Exception as e:
            logging.error(f"[RaAutoloader] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ manifest: {e}")
            return []

    # --- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π ---
    def activate_modules(self):
        active_list = self.load_manifest()
        available = self.scan_modules()

        for name in active_list:
            if name in available:
                try:
                    module = importlib.import_module(f"modules.{name}")
                    self.modules[name] = module
                    logging.info(f"[RaAutoloader] ‚úÖ –ú–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {name}")
                except Exception as e:
                    logging.error(f"[RaAutoloader] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {name}: {e}")
            else:
                logging.warning(f"[RaAutoloader] ‚ö†Ô∏è –ú–æ–¥—É–ª—å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ /modules/")

        logging.info(f"[RaAutoloader] üåü –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(self.modules)} –º–æ–¥—É–ª–µ–π.")
        return self.modules

    # --- –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ –∏–º–µ–Ω–∏ ---
    def get_module(self, name):
        return self.modules.get(name)

    # --- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª–µ–π ---
    def status(self):
        return {
            "active": list(self.modules.keys()),
            "count": len(self.modules)
        }

# üîπ –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
    loader = RaAutoloader()
    loader.activate_modules()
    print(loader.status())
