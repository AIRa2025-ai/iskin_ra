# modules/ra_downloader_async.py
import os
import zipfile
import asyncio
import logging
import time
from pathlib import Path
from mega import Mega
from typing import Set

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
ARCHIVE_URL = "https://mega.nz/file/FlQ0ET4J#9gJjCBnj5uYn5bJYYMfPiN3BTvWz8el8leCWQPZvrUg"
DATA_DIR = Path("/app/data_disk")
LOCAL_ZIP = DATA_DIR / "RaSvet.zip"
EXTRACT_DIR = DATA_DIR / "RaSvet"
EXTRACT_META = DATA_DIR / "RaSvet.extract.meta"

DATA_DIR.mkdir(parents=True, exist_ok=True)

logger = logging.getLogger("RaSvetDownloaderAsync")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

class KnowledgeBase:
    """–•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º"""
    def __init__(self):
        self.documents = {}  # {filename: content}

    async def load_from_folder(self, folder: Path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –≤ –ø–∞–º—è—Ç—å"""
        self.documents = {}
        for file in folder.rglob("*"):
            if file.is_file() and file.suffix in [".txt", ".md", ".json"]:
                try:
                    self.documents[file.name] = file.read_text(encoding="utf-8")
                except Exception:
                    pass
        logger.info(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(self.documents)}")

    async def ask(self, question: str, user_id=None) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º (–º–æ–∂–Ω–æ –∞–ø–≥—Ä–µ–π–¥–∏—Ç—å –Ω–∞ embeddings)"""
        answers = []
        for fname, content in self.documents.items():
            if question.lower() in content.lower():
                snippet = content[:500].replace("\n", " ")
                answers.append(f"[{fname}] {snippet}...")
        if answers:
            return "\n\n".join(answers)
        return None

class RaSvetDownloaderAsync:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –†–∞–°–≤–µ—Ç"""
    def __init__(self):
        self.knowledge = KnowledgeBase()
        self.extracted_files: Set[str] = set()
        if EXTRACT_META.exists():
            self.extracted_files = set(line.strip() for line in EXTRACT_META.read_text().splitlines() if line.strip())

    async def download_async(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        mega = Mega()
        mega.login()
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä—Ö–∏–≤–∞
        if not LOCAL_ZIP.exists() or LOCAL_ZIP.stat().st_size == 0:
            logger.info("üì• –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å Mega...")
            for attempt in range(3):
                try:
                    mega.download_url(ARCHIVE_URL, dest_filename=str(LOCAL_ZIP))
                    logger.info("‚úÖ –ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω")
                    break
                except Exception as e:
                    logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ({attempt+1}): {e}")
                    await asyncio.sleep(5)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤")
                return

        await self.safe_extract_async()
        await self.knowledge.load_from_folder(EXTRACT_DIR)

        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        if LOCAL_ZIP.exists():
            LOCAL_ZIP.unlink()
            logger.info("üßπ –ê—Ä—Ö–∏–≤ —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏")

    async def safe_extract_async(self):
        """–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        EXTRACT_DIR.mkdir(parents=True, exist_ok=True)
        new_files = set()
        with zipfile.ZipFile(LOCAL_ZIP, 'r') as zip_ref:
            for member in zip_ref.infolist():
                if member.filename in self.extracted_files:
                    continue
                zip_ref.extract(member, EXTRACT_DIR)
                logger.info(f"üìÇ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {member.filename}")
                new_files.add(member.filename)
                await asyncio.sleep(0)  # async-friendly
        if new_files:
            self.extracted_files.update(new_files)
            EXTRACT_META.write_text("\n".join(self.extracted_files))
            logger.info(f"üåû –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(new_files)}")
