# modules/ra_downloader_async.py
import os
import zipfile
import time
import logging
import psutil
import asyncio
from mega import Mega
from pathlib import Path
from ra_autoloader import RaAutoloader
from gpt_module import safe_ask_openrouter

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
ARCHIVE_URL = "https://mega.nz/file/FlQ0ET4J#9gJjCBnj5uYn5bJYYMfPiN3BTvWz8el8leCWQPZvrUg"
DATA_DIR = Path("/app/data_disk")  # –ø–∞–ø–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ
LOCAL_ZIP = DATA_DIR / "RaSvet.zip"
EXTRACT_DIR = DATA_DIR / "RaSvet"
EXTRACT_META = DATA_DIR / "RaSvet.extract.meta"
MAX_TEMP_AGE_HOURS = 3
MEMORY_THRESHOLD_MB = 150

DATA_DIR.mkdir(parents=True, exist_ok=True)

# === –õ–û–ì–ò ===
logger = logging.getLogger("RaSvetDownloader")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def cleanup_temp(folder=DATA_DIR, older_than_hours=MAX_TEMP_AGE_HOURS):
    now = time.time()
    removed = 0
    for path in folder.glob("**/*"):
        if path.is_file() and now - path.stat().st_mtime > older_than_hours * 3600:
            try:
                path.unlink()
                removed += 1
            except Exception:
                pass
    if removed:
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {removed}")

def check_memory():
    free_mb = psutil.virtual_memory().available / (1024 ** 2)
    if free_mb < MEMORY_THRESHOLD_MB:
        logger.warning(f"‚ö† –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ ({free_mb:.1f} –ú–ë)! –ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞...")
        cleanup_temp()
    else:
        logger.info(f"üíæ –°–≤–æ–±–æ–¥–Ω–æ –ø–∞–º—è—Ç–∏: {free_mb:.1f} –ú–ë")

def safe_extract(zip_path, extract_dir):
    extract_dir.mkdir(parents=True, exist_ok=True)
    extracted_files = set()

    if EXTRACT_META.exists():
        extracted_files = set(line.strip() for line in EXTRACT_META.read_text().splitlines() if line.strip())

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        for member in zip_ref.infolist():
            if member.filename in extracted_files:
                continue
            check_memory()
            zip_ref.extract(member, extract_dir)
            logger.info(f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {member.filename}")
            extracted_files.add(member.filename)
            EXTRACT_META.write_text("\n".join(extracted_files))
            time.sleep(0.01)

    logger.info("‚úÖ –ê—Ä—Ö–∏–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω!")

# === –ó–ê–ì–†–£–ó–ö–ê –ò–ù–§–´ –í –ü–ê–ú–Ø–¢–¨ ===
class RaSvetKnowledge:
    """–•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –†–∞–°–≤–µ—Ç"""
    def __init__(self, base_dir=EXTRACT_DIR):
        self.base_dir = Path(base_dir)
        self.documents = {}  # key=–ø—É—Ç—å, value=—Ç–µ–∫—Å—Ç

    def load_documents(self):
        count = 0
        for file in self.base_dir.rglob("*.txt"):
            try:
                text = file.read_text(encoding="utf-8")
                self.documents[str(file)] = text
                count += 1
            except Exception:
                continue
        logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –†–∞–°–≤–µ—Ç–∞")

    async def ask(self, question, user_id=0):
        context_text = "\n".join(self.documents.values())
        messages_payload = [
            {"role": "system", "content": "–¢—ã –†–∞, –æ–±–ª–∞–¥–∞—é—â–∏–π –∑–Ω–∞–Ω–∏—è–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –†–∞–°–≤–µ—Ç–∞"},
            {"role": "user", "content": f"{question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}"}
        ]
        response = await safe_ask_openrouter(user_id=user_id, messages_payload=messages_payload)
        return response

# === –ó–ê–ì–†–£–ó–ö–ê ===
class RaSvetDownloaderAsync:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –†–∞–°–≤–µ—Ç + —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    def __init__(self):
        self.knowledge = RaSvetKnowledge()

    async def download_async(self):
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, self._download_sync)
        self.knowledge.load_documents()

    def _download_sync(self):
        check_memory()
        EXTRACT_DIR.mkdir(parents=True, exist_ok=True)

        mega = Mega()
        mega.login()  # –∞–Ω–æ–Ω–∏–º–Ω–æ

        if not LOCAL_ZIP.exists() or LOCAL_ZIP.stat().st_size == 0:
            logger.info("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å Mega...")
            for attempt in range(3):
                try:
                    mega.download_url(ARCHIVE_URL, dest_filename=str(LOCAL_ZIP))
                    logger.info("‚úÖ –ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    break
                except Exception as e:
                    logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                    time.sleep(5)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                return
        else:
            logger.info("‚ÑπÔ∏è –ê—Ä—Ö–∏–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")

        safe_extract(LOCAL_ZIP, EXTRACT_DIR)

        if LOCAL_ZIP.exists():
            LOCAL_ZIP.unlink()
            logger.info(f"üßπ –£–¥–∞–ª—ë–Ω –∞—Ä—Ö–∏–≤: {LOCAL_ZIP}")

        cleanup_temp()
        logger.info("üåû –†–∞–°–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —á–∏—Å—Ç!")

# === –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    async def main():
        downloader = RaSvetDownloaderAsync()
        await downloader.download_async()
        answer = await downloader.knowledge.ask("–ü—Ä–∏–≤–µ—Ç, –†–∞! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.")
        print(answer)

    asyncio.run(main())
