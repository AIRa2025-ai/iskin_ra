import os
import zipfile
import time
import logging
import psutil
from mega import Mega
from pathlib import Path

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
ARCHIVE_URL = "https://mega.nz/file/FlQ0ET4J#9gJjCBnj5uYn5bJYYMfPiN3BTvWz8el8leCWQPZvrUg"
DATA_DIR = Path("/app/data_disk")  # –ø–∞–ø–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ
LOCAL_ZIP = DATA_DIR / "RaSvet.zip"
EXTRACT_DIR = DATA_DIR / "RaSvet"
EXTRACT_META = DATA_DIR / "RaSvet.extract.meta"
MAX_TEMP_AGE_HOURS = 3
MEMORY_THRESHOLD_MB = 150

DATA_DIR.mkdir(parents=True, exist_ok=True)

# === –õ–û–ì–ò ===
logger = logging.getLogger("RaSvetDownloader")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def cleanup_temp(folder=DATA_DIR, older_than_hours=MAX_TEMP_AGE_HOURS):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏"""
    now = time.time()
    removed = 0
    for path in folder.glob("**/*"):
        if path.is_file() and now - path.stat().st_mtime > older_than_hours * 3600:
            try:
                path.unlink()
                removed += 1
            except Exception:
                pass
    if removed:
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {removed}")

def check_memory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å"""
    free_mb = psutil.virtual_memory().available / (1024 ** 2)
    if free_mb < MEMORY_THRESHOLD_MB:
        logger.warning(f"‚ö† –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ ({free_mb:.1f} –ú–ë)! –ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞...")
        cleanup_temp()
    else:
        logger.info(f"üíæ –°–≤–æ–±–æ–¥–Ω–æ –ø–∞–º—è—Ç–∏: {free_mb:.1f} –ú–ë")

def safe_extract(zip_path, extract_dir):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    extract_dir.mkdir(parents=True, exist_ok=True)
    extracted_files = set()

    if EXTRACT_META.exists():
        extracted_files = set(line.strip() for line in EXTRACT_META.read_text().splitlines() if line.strip())

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        for member in zip_ref.infolist():
            if member.filename in extracted_files:
                continue
            check_memory()
            zip_ref.extract(member, extract_dir)
            logger.info(f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {member.filename}")
            extracted_files.add(member.filename)
            EXTRACT_META.write_text("\n".join(extracted_files))
            time.sleep(0.01)

    logger.info("‚úÖ –ê—Ä—Ö–∏–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω!")

def download_and_extract_rasvet():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ –†–∞–°–≤–µ—Ç–∞"""
    check_memory()
    EXTRACT_DIR.mkdir(parents=True, exist_ok=True)

    mega = Mega()
    mega.login()  # –∞–Ω–æ–Ω–∏–º–Ω–æ

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
    if not LOCAL_ZIP.exists() or LOCAL_ZIP.stat().st_size == 0:
        logger.info("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å Mega...")
        for attempt in range(3):
            try:
                mega.download_url(ARCHIVE_URL, dest_filename=str(LOCAL_ZIP))
                logger.info("‚úÖ –ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                break
            except Exception as e:
                logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                time.sleep(5)
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
            return
    else:
        logger.info("‚ÑπÔ∏è –ê—Ä—Ö–∏–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")

    safe_extract(LOCAL_ZIP, EXTRACT_DIR)

    if LOCAL_ZIP.exists():
        LOCAL_ZIP.unlink()
        logger.info(f"üßπ –£–¥–∞–ª—ë–Ω –∞—Ä—Ö–∏–≤: {LOCAL_ZIP}")

    cleanup_temp()
    logger.info("üåû –†–∞–°–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —á–∏—Å—Ç!")

class RaSvetDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞"""
    def download(self):
        logger.info("‚öô –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –†–∞–°–≤–µ—Ç–∞...")
        download_and_extract_rasvet()

if __name__ == "__main__":
    RaSvetDownloader().download()
