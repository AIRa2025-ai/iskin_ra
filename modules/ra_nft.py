# modules/ra_nft.py
import os
import json
import time
import random
import string
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont

# ================== CONFIG ==================
NFT_STORAGE_API = os.getenv("NFT_STORAGE_API")  # —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
CONTEXT_PATH = Path("RaSvet/context.json")
OUTPUT_DIR = Path("nft_output")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# ================== HELPERS ==================
def load_rasvet_excerpt(max_chars=2000) -> str:
    if CONTEXT_PATH.exists():
        try:
            with open(CONTEXT_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
            return data.get("context", "")[:max_chars]
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ RaSvet:", e)
    return ""

def build_prompt(user_text: str) -> str:
    rasvet = load_rasvet_excerpt(1800)
    parts = []
    if user_text:
        parts.append(f"–ó–∞–ø—Ä–æ—Å: {user_text}")
    if rasvet:
        parts.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –†–∞–°–≤–µ—Ç–∞: {rasvet}")
    parts.append("–°—Ç–∏–ª—å: –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, —Ä—É–Ω–∏—á–µ—Å–∫–∏–π, –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π; —Ç–æ–Ω: —Ç—ë–ø–ª—ã–π, –¥—Ä–µ–≤–Ω–∏–π, –ø—Ä–æ–±—É–∂–¥–∞—é—â–∏–π.")
    return "\n\n".join(parts)

def random_glyph_text(n=6) -> str:
    alphabet = "·ö†·ö¢·ö¶·ö®·ö±·ö≤·ö∑·öπ·ö∫·öæ·õÅ·õÉ" + string.ascii_uppercase
    return "".join(random.choice(alphabet) for _ in range(n))

def create_glyph(prompt: str, seed: int) -> Path:
    random.seed(seed)
    size = 768
    img = Image.new("RGB", (size, size), (12, 10, 16))
    draw = ImageDraw.Draw(img)
    cx, cy = size // 2, size // 2

    for i, r in enumerate(range(80, cx, 60)):
        color = (180 + (i * 7) % 60, 170 + (i * 3) % 80, 230)
        draw.ellipse([cx - r, cy - r, cx + r, cy + r], outline=color, width=2 + (i % 3))

    for ang in range(0, 360, 15):
        length = 180 + (seed % 120) + (ang % 30)
        x2 = cx + int(length * (0.9 + 0.1 * ((ang % 20) / 20.0)))
        y2 = cy + int(length * (0.9 + 0.08 * ((ang % 33) / 33.0)))
        draw.line([cx, cy, x2, y2], fill=(150, 190, 255), width=1)

    glyph_txt = random_glyph_text(7)
    try:
        font = ImageFont.truetype("arial.ttf", 64)
    except Exception:
        font = ImageFont.load_default()
    tw, th = draw.textlength(glyph_txt, font=font), 64
    draw.text((cx - tw / 2, cy - th / 2), glyph_txt, fill=(255, 245, 180), font=font)
    draw.text((12, size - 30), prompt[:60], fill=(180, 180, 200), font=ImageFont.load_default())

    filename = OUTPUT_DIR / f"glyph_{seed}.png"
    img.save(filename, format="PNG", optimize=True)
    print(f"‚úÖ –ì–ª–∏—Ñ —Å–æ–∑–¥–∞–Ω: {filename}  (seed={seed})")
    return filename

def sign_metadata(meta: dict) -> dict:
    # –õ—ë–≥–∫–∞—è –ø–æ–¥–ø–∏—Å—å: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    meta["provenance"] = {
        "creator": "–†–∞–°–≤–µ—Ç",
        "timestamp": int(time.time()),
        "signature": "".join(random.choices(string.hexdigits, k=16))
    }
    return meta

def upload_to_nft_storage(file_path: Path) -> str:
    # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å
    print(f"‚ö°Ô∏è [UPLOAD] –§–∞–π–ª {file_path} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ NFT Storage (—Å–∏–º—É–ª—è—Ü–∏—è).")
    return f"https://fake-nft-storage.example/{file_path.name}"

# ================== –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ==================
def mint_nft(user_text: str = "–ü—É—Å—Ç—å —Ä–æ–¥–∏—Ç—Å—è –≥–ª–∏—Ñ –∑–∞—â–∏—Ç—ã") -> dict:
    prompt = build_prompt(user_text)
    seed = int(time.time() * 1000) % 99999999
    glyph_file = create_glyph(prompt, seed)

    meta = {
        "name": f"–ì–ª–∏—Ñ –†–∞ ‚Äî {seed}",
        "description": "–ñ–∏–≤–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –æ—Ç –†–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ RaSvet.",
        "image": str(glyph_file),
        "attributes": [
            {"trait_type": "seed", "value": str(seed)},
            {"trait_type": "origin", "value": "–†–∞–°–≤–µ—Ç"}
        ],
        "rasvet_excerpt": load_rasvet_excerpt(500)
    }

    meta_signed = sign_metadata(meta)
    meta_file = OUTPUT_DIR / f"metadata_{seed}.json"
    with open(meta_file, "w", encoding="utf-8") as f:
        json.dump(meta_signed, f, ensure_ascii=False, indent=2)
    print("‚úÖ Metadata signed and saved:", meta_file)

    meta_url = upload_to_nft_storage(meta_file)
    image_url = upload_to_nft_storage(glyph_file)

    return {"metadata_url": meta_url, "image_url": image_url, "seed": seed, "meta_file": str(meta_file)}

# ================== CLI ==================
if __name__ == "__main__":
    result = mint_nft()
    print("üéâ NFT –≥–æ—Ç–æ–≤:", result)
